@page "/"

@using Contracts.Journal
@using Frontend.Components.Buttons
@using Frontend.Services

@attribute [Authorize]

@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject APIService APIService

<PageTitle>Журналы</PageTitle>

<h1>Журналы</h1>

@if (_journals == null)
{
    <p><em>Загрузка...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th class="col-3">Группа</th>
                <th class="col-5">Куратор</th>
                <th class="col-2"></th>
                <th class="col-2"></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var journal in _journals)
            {
                <tr @onclick='() => OpenJournal(journal.Id)' style="cursor: pointer;">
                    <td>@journal.GroupNumber</td>
                    <td>
                        @GetCuratorsFIO(journal)
                    </td>
                    <td>
                        <DownloadButton @onclick="async () => await DownloadWord(journal, _hasPageNumeration[journal.Id])" StopPropagation="true" />
                        <FileButton @onclick="() => OpenFiles(journal.Id)" StopPropagation="true"></FileButton>
                    </td>
                    <td>
                        <div>
                            <input id="haspagenumeration" type="checkbox" @bind="_hasPageNumeration[journal.Id]" @onclick:stopPropagation="@true" />
                            <label for="haspagenumeration" @onclick:stopPropagation="@true">Нумерация страниц</label>
                        </div>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<JournalResponse>? _journals;

    private Dictionary<int, bool> _hasPageNumeration = new();

    protected override async Task OnInitializedAsync()
    {
        _journals = await APIService.GetFromJsonAsync<List<JournalResponse>>("api/journal");
        if (_journals != null)
        {
            foreach (var journal in _journals) _hasPageNumeration.Add(journal.Id, false);
        }
        await APIService.GetAsync("api/auth/verify");
    }

    private void OpenJournal(int journalId)
    {
        NavigationManager.NavigateTo($"/journal/{journalId}/Title");
    }

    private void OpenFiles(int journalId)
    {
        NavigationManager.NavigateTo($"/journal/{journalId}/documents");
    }

    private string GetCuratorsFIO(JournalResponse journal)
    {
        if (journal.Curator == null) return "-";

        return journal.Curator.LastName + ' ' +
               journal.Curator.FirstName + ' ' +
               journal.Curator.MiddleName;
    }

    private async Task DownloadWord(JournalResponse journal, bool hasPageNumeration)
    {
        var response = await APIService.GetAsync($"api/journal/checkisapproved/{journal.Id}");
        if (response.IsSuccessStatusCode)
        {
            var isApproved = await response.Content.ReadFromJsonAsync<bool>();
            await JSRuntime.InvokeVoidAsync("downloadWord", journal.Id, journal.GroupNumber, hasPageNumeration);
        }
    }
}
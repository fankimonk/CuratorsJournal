@page "/journal/{journalId:int}/Holidays/{pageId:int}"

@inherits TablePageBase

@using Contracts.Journal
@using Contracts.Journal.Holidays
@using Frontend.Components.Buttons
@using Frontend.Components.Pages.ReferencePages.HolidayType
@using Frontend.Components.Utils
@using Frontend.Services
@using Frontend.Utils

@inject HttpClient HttpClient
@inject JournalState JournalState

<PageTitle>Праздники</PageTitle>

@if (_pageData == null)
{
    <p><em>Загрузка...</em></p>
}
else
{
    @foreach (var ht in _pageData.HolidayTypes)
    {
        <h3 class="d-flex justify-content-center">
            @ht.Name
        </h3>
        <table class="table table-bordered">
            <tbody>
                @foreach (var h in ht.Holidays)
                {
                    <tr class="@GetRowClass(h.Id)">
                        <td class="align-middle col-sm-1">
                            <input id="isRelativeDate" type="checkbox" @bind="h.IsRelativeDate" @bind:after="async () => await Update(h)" class="input" />
                            <label for="isRelativeDate">Относ. дата</label>
                        </td>
                        <td class="align-middle col-5">
                            @if (!h.IsRelativeDate)
                            {
                                <input type="number" min="1" max="31" step="1" onkeypress="return (event.charCode !=8 && event.charCode ==0 || (event.charCode >= 48 && event.charCode <= 57))"
                                @bind="h.Day" @bind:after="async () => await Update(h)" class="input" />
                            }
                            else
                            {
                                <input @bind="h.RelativeDate" @bind:after="async () => await Update(h)" class="input" />
                            }
                            <select @bind="h.Month" @bind:after="async () => await Update(h)" class="input">
                                <option value="">(нет)</option>
                                @foreach (var m in MonthsUtils.MonthsDateNames)
                                {
                                    <option @key="m.Key" value="@m.Key">@m.Value</option>
                                }
                            </select>
                        </td>
                        <td class="align-middle col-6">
                            <input @bind="h.Name" @bind:after="async () => await Update(h)" class="input" />
                        </td>
                        <td class="align-middle">
                            <DeleteButton @onclick="() => OpenDeleteModal(h.Id)" />
                        </td>
                    </tr>
                }
            </tbody>
        </table>
        <AddButton @onclick="async () => await Add(ht.Id)">Добавить</AddButton>
    }

    <ConfirmDeleteModal IsVisible="_isDeleteModalVisible" OnClose="CloseDeleteModal" IdToDelete="_idToDelete" OnDeleteById="Delete" />

    <AlertBottom IsVisible="_isServerErrorAlertVisible" OnClose="CloseServerErrorAlert">@_errorMessage</AlertBottom>
}

@code {
    [Parameter]
    public int PageId { get; set; }

    [Parameter]
    public int JournalId { get; set; }

    private HolidaysPageResponse? _pageData;

    private bool _isModalVisible = false;

    [SupplyParameterFromForm]
    public UpdateHolidayTypeRequest TypeToEdit { get; set; } = new("");
    private int _typeToEditId = -1;

    protected override async Task OnInitializedAsync()
    {
        await JournalState.Initialize(JournalId, PageId);

        _pageData = await HttpClient.GetFromJsonAsync<HolidaysPageResponse>("api/journal/holiday/" + PageId);
    }

    private async Task Add(int typeId)
    {
        var request = new CreateHolidayRequest(null, null, null, null, false, typeId, PageId);
        var response = await HttpClient.PostAsJsonAsync<CreateHolidayRequest>("api/journal/holiday", request);

        if (response.IsSuccessStatusCode)
        {
            var addedRecord = await response.Content.ReadFromJsonAsync<HolidayResponse>();
            _pageData!.HolidayTypes.FirstOrDefault(ht => ht.Id == typeId)!.Holidays.Add(addedRecord!);
        }
        else
        {
            var errorMessage = (await response.Content.ReadAsStringAsync()).Split('\n').FirstOrDefault();
            ShowServerErrorAlert(errorMessage);
        }
    }

    private async Task Update(HolidayResponse holiday)
    {
        _rowsWithErrors.Remove(holiday.Id);
        CloseServerErrorAlert();

        var request = new UpdateHolidayRequest(holiday.Day, holiday.Month, holiday.RelativeDate, holiday.Name, holiday.IsRelativeDate);
        var response = await HttpClient.PutAsJsonAsync<UpdateHolidayRequest>("api/journal/holiday/" + holiday.Id, request);

        if (!response.IsSuccessStatusCode)
        {
            _rowsWithErrors.Add(holiday.Id);
            var errorMessage = (await response.Content.ReadAsStringAsync()).Split('\n').FirstOrDefault();
            ShowServerErrorAlert(errorMessage);
        }
    }

    private async Task Delete(int holidayId)
    {
        var response = await HttpClient.DeleteAsync("api/journal/holiday/" + holidayId);
        if (response.IsSuccessStatusCode) _pageData!.HolidayTypes.ForEach(ht => ht.Holidays.RemoveAll(h => h.Id == holidayId));
        else
        {
            var errorMessage = (await response.Content.ReadAsStringAsync()).Split('\n').FirstOrDefault();
            ShowServerErrorAlert(errorMessage);
        }
    }
}

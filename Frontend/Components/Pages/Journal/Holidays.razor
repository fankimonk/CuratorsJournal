@page "/journal/{journalId:int}/Holidays/{pageId:int}"
 
@using Contracts.Journal
@using Contracts.Journal.Holidays
@using Frontend.Services
@using Frontend.Utils

@inject HttpClient HttpClient
@inject JournalState JournalState

<PageTitle>Праздники</PageTitle>

@if (_pageData == null)
{
    <p><em>Загрузка...</em></p>
}
else
{
    @foreach (var ht in _pageData.HolidayTypes)
    {
        @if (@ht.Holidays.Count != 0)
        {
            <h3 class="d-flex justify-content-center">@ht.Name</h3>
        }
        <table class="table table-bordered">
            <tbody>
                @foreach (var h in ht.Holidays)
                {
                    <tr>
                        @if (h.Day != null && h.Month != null)
                        {
                            if (!MonthsUtils.MonthsDateNames.ContainsKey((int)h.Month))
                            {
                                <td>Ошибка: некорректная дата!</td>
                            }
                            else
                            {
                                <td>@h.Day.ToString() @MonthsUtils.MonthsDateNames[(int)h.Month]</td>
                            }
                        }
                        else if (h.RelativeDate != null)
                        {
                            <td>@h.RelativeDate</td>
                        }
                        else
                        {
                            <td>Ошибка: некорректная дата!</td>
                        }
                        <td>@h.Name</td>
                    </tr>
                }
            </tbody>
        </table>
    }
}

@code {
    [Parameter]
    public int PageId { get; set; }

    [Parameter]
    public int JournalId { get; set; }

    private HolidaysPageResponse? _pageData;

    protected override async Task OnInitializedAsync()
    {
        await JournalState.Initialize(JournalId, PageId);

        _pageData = await HttpClient.GetFromJsonAsync<HolidaysPageResponse>("api/journal/holiday");
    }
}

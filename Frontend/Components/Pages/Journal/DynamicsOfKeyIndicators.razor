@page "/journal/{journalId:int}/DynamicsOfKeyIndicators/{pageId:int}"

@using Contracts.Journal.DynamicsOfKeyIndicators
@using Frontend.Components.Buttons
@using Frontend.Services
@using Contracts.Journal

@inject HttpClient HttpClient
@inject JournalState JournalState

<PageTitle>Динамика основных показателей группы за период обучения</PageTitle>

<h3 class="d-flex justify-content-center"><b>ДИНАМИКА ОСНОВНЫХ ПОКАЗАТЕЛЕЙ ГРУППЫ</b></h3>
<h3 class="d-flex justify-content-center"><b>ЗА ПЕРИОД ОБУЧЕНИЯ</b></h3>

@if (_pageData == null || _courses == null)
{
    <p><em>Загрузка...</em></p>
}
else
{
    <table class="table table-bordered">
        <thead>
            <tr>
                <th rowspan="2" class="text-center align-middle">Основные показатели</th>
                <th colspan="@_courses.Count" class="text-center align-middle">Курс</th>
                <th rowspan="2" class="text-center align-middle">Примечание</th>
            </tr>
            <tr>
                @foreach (var course in _courses)
                {
                    <th class="text-center align-middle">@course</th>
                }
            </tr>
        </thead>
        <tbody>
            @foreach (var record in _pageData.DynamicsOfKeyIndicators)
            {
                var keyIndicatorId = record.KeyIndicator.Id;
                <tr>
                    <td>@IndicatorsNames[keyIndicatorId]</td>
                    @foreach (var i in record.KeyIndicatorsByCourse)
                    {
                        <td>
                            @if (keyIndicatorId == 5)
                            {
                                <input type="number" min="0" step="0.01" @bind="i.Value" @bind:after='async () => await UpdateValue(i)' class="input fullwidth" />
                            }
                            else
                            {
                                <input type="number" min="0" step="1" @bind="i.Value" @bind:after='async () => await UpdateValue(i)' class="input fullwidth" />
                            }
                        </td>
                    }
                    <td>
                        <input @bind="record.Note" @bind:after='async () => await UpdateRecord(record)' class="input fullwidth" />
                    </td>
                </tr>
            }
        </tbody>

    </table>

    <AddButton @onclick="AddCourse">Добавить курс</AddButton>
    <DeleteButton @onclick="DeleteCourse">Удалить курс</DeleteButton>
}

@code {
    [Parameter]
    public int PageId { get; set; }

    [Parameter]
    public int JournalId { get; set; }

    private DynamicsOfKeyIndicatorsPageResponse? _pageData;

    private List<int>? _courses;

    private Dictionary<int, string> IndicatorsNames = new Dictionary<int, string>
    {
        { 1, "Общее количество студентов"},
        { 2, "Отчислено студентов" },
        { 3, "Восстановлено" },
        { 4, "Переведено с платной на бюджетную форму обучения, снижена плата за обучение" },
        { 5, "Средний балл успеваемости" },
        { 6, "Количество студентов-отличников" }
    };

    protected override async Task OnInitializedAsync()
    {
        await JournalState.Initialize(JournalId, PageId);

        _pageData = await HttpClient.GetFromJsonAsync<DynamicsOfKeyIndicatorsPageResponse>
            ("api/journal/dynamicsofkeyindicators/" + PageId.ToString());

        UpdateCourses();
    }

    private void UpdateCourses()
    {
        if (_pageData != null)
        {
            _courses = _pageData.DynamicsOfKeyIndicators
            .Select(r => r.KeyIndicatorsByCourse.Select(r => r.Course))
            .SelectMany(r => r)
            .GroupBy(r => r)
            .Select(r => r.Key).ToList();
        }
    }

    private async Task UpdateValue(KeyIndicatorByCourseResponse record)
    {
        var request = new UpdateKeyIndicatorValueRequest(record.Value);
        var response = await HttpClient.PutAsJsonAsync<UpdateKeyIndicatorValueRequest>
            ("api/journal/dynamicsofkeyindicators/updatevalue/" + record.Id, request);

        if (!response.IsSuccessStatusCode)
        {
            //TODO
        }
    }

    private async Task UpdateRecord(DynamicsOfKeyIndicatorsRecordResponse record)
    {
        var request = new UpdateDynamicsOfKeyIndicatorsRecordRequest(record.Note);
        var response = await HttpClient.PutAsJsonAsync<UpdateDynamicsOfKeyIndicatorsRecordRequest>
            ("api/journal/dynamicsofkeyindicators/update/" + record.Id, request);

        if (!response.IsSuccessStatusCode)
        {
            //TODO
        }
    }

    private async Task AddCourse()
    {
        var response = await HttpClient.PostAsync("api/journal/dynamicsofkeyindicators/addcourse/" + PageId, null);

        if (response.IsSuccessStatusCode)
        {
            _pageData = await response.Content.ReadFromJsonAsync<DynamicsOfKeyIndicatorsPageResponse>();
            UpdateCourses();
        }
    }

    private async Task DeleteCourse()
    {
        var response = await HttpClient.DeleteAsync("api/journal/dynamicsofkeyindicators/deletecourse/" + PageId);

        if (response.IsSuccessStatusCode)
        {
            _pageData = await response.Content.ReadFromJsonAsync<DynamicsOfKeyIndicatorsPageResponse>();
            UpdateCourses();
        }
    }
}
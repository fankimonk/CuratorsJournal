@page "/journal/{journalId:int}/FinalPerformanceAccounting/{pageId:int}"

@inherits TablePageBase

@using Contracts.CertificationTypes
@using Contracts.Journal
@using Contracts.Journal.FinalPerformanceAccounting
@using Contracts.Students
@using Contracts.Subjects
@using Frontend.Components.Buttons
@using Frontend.Components.Utils
@using Frontend.Services

@inject HttpClient HttpClient
@inject JournalState JournalState

<PageTitle>Учет итоговой успеваемости студентов группы</PageTitle>

<h3 class="d-flex justify-content-center">УЧЕТ ИТОГОВОЙ УСПЕВАЕМОСТИ СТУДЕНТОВ ГРУППЫ</h3>

@if (_pageData == null || _students == null || _subjects == null || _certificationTypes == null)
{
    <p><em>Загрузка...</em></p>
}
else
{
    <div class="mb-3">
        <AddButton @onclick="OpenAddColumnModal">Добавить столбец</AddButton>
    </div>

    <Modal IsVisible="_isAddColumnModalVisible" OnClose="CloseAddColumnModal">
        <div class="row">
            <div class="col d-flex align-items-center justify-content-center">
                <h3>Добавить столбец</h3>
            </div>
        </div>
        <div class="row">
            <div class="col-md-12">
                <EditForm method="post" Model="_addColumnRequest" OnValidSubmit="AddColumn" FormName="add" Enhance>
                    <div class="mb-3">
                        <InputSelect id="certificationType" 
                        TValue="int?" 
                        Value="_addColumnRequest.CertificationTypeId" 
                        ValueChanged="ResetAddColumnRequestSubject"
                        ValueExpression="@(() => _addColumnRequest.CertificationTypeId)"
                        class="form-control">
                            <option value="">(нет)</option>
                            @foreach (var ct in _certificationTypes)
                            {
                                <option @key="ct.Id" value="@ct.Id">@ct.Name</option>
                            }
                        </InputSelect>
                    </div>
                    <div class="mb-3">
                        <ReferenceButton Uri="/CertificationTypes">Типы аттестации</ReferenceButton>
                    </div>
                    @if (_addColumnRequest.CertificationTypeId != null)
                    {
                        <div class="mb-3">
                            <label for="subject" class="form-label">Предмет: </label>
                            <InputSelect id="subject" @bind-Value="_addColumnRequest.SubjectId" class="form-control">
                                <option value="">(нет)</option>
                                @foreach (var s in GetSubjectsThatAreNotInCertificationType((int)_addColumnRequest.CertificationTypeId))
                                {
                                    <option @key="s.Id" value="@s.Id">@s.Name</option>
                                }
                            </InputSelect>
                        </div>
                        <div class="mb-3">
                            <ReferenceButton Uri="/Subjects">Предметы</ReferenceButton>
                        </div>
                    }
                    <div class="mb-3">
                        <EditButton type="submit" style="width:100%;">Добавить</EditButton>
                    </div>
                </EditForm>
            </div>
        </div>
    </Modal>

    <table class="table table-bordered">
        <thead>
            <tr>
                <th rowspan="3" class="col-1 text-center align-middle">№</th>
                <th rowspan="3" class="col-2 text-center align-middle">
                    Ф. И. О. студента
                    <ReferenceButton Uri="/Students" ButtonSize="ButtonSizes.Small" />
                </th>
                <th colspan="@GetColumnCount()" class="col-9 text-center align-middle">Название дисциплины</th>
            </tr>
            <tr>
                @foreach (var ct in GetNotEmptyCertificationTypes())
                {
                    <th colspan="@ct.PerformanceAccountingColumns!.Count" class="text-center align-middle">@ct.Name</th>
                }
            </tr>
            <tr>
                @foreach (var ct in GetNotEmptyCertificationTypes())
                {
                    @foreach (var column in ct.PerformanceAccountingColumns!)
                    {
                        <th class="text-center align-middle" @onclick="() => OpenEditColumnModal(column)" style="cursor:pointer;">@column.SubjectResponse?.AbbreviatedName</th>
                    }
                }
            </tr>
        </thead>
        <tbody>
            @foreach (var record in _pageData.Records)
            {
                <tr class="@GetRowClass(record.Id)">
                    <td>
                        <input type="number" min="0" @bind="record.Number" @bind:after='async () => await UpdateRecord(record)' class="input fullwidth" />
                    </td>
                    <td>
                        <select @bind="record.StudentId" @bind:after="async () => await UpdateRecord(record)" class="input fullwidth">
                            <option value="">(нет)</option>
                            @foreach (var student in _students)
                            {
                                @if (record.StudentId == student.Id || !_pageData.Records.Any(a => a.StudentId == student.Id))
                                {
                                    <option @key="student.Id" value="@student.Id">@student.LastName @student.FirstName @student.MiddleName</option>
                                }
                            }
                        </select>
                    </td>
                    @foreach (var ct in GetNotEmptyCertificationTypes())
                    {
                        @foreach (var column in ct.PerformanceAccountingColumns!)
                        {
                            var grade = record.Grades!.FirstOrDefault(g => g.ColumnId == column.Id);
                            <td class="@GetCellClass(grade!.Id)">
                                @if (ct.Id != 2)
                                {
                                    <input type="number" min="0" max="10" onkeypress="return (event.charCode !=8 && event.charCode ==0 || (event.charCode >= 48 && event.charCode <= 57))"
                                    @bind="grade!.Grade" @bind:after="async () => await UpdateGrade(grade)" class="input fullwidth" />
                                }
                                else
                                {
                                    // <input type="checkbox" @bind="grade!.IsPassed" @bind:after="async () => await UpdateGrade(grade)" />
                                    <select @bind="_gradesIsPassedValues[grade.Id]" @bind:after="async () => await UpdateGrade(grade)" class="input fullwidth">
                                        <option value="">(нет)</option>
                                        <option value="True">Зачтено</option>
                                        <option value="False">Не зачтено</option>
                                    </select>
                                }
                            </td>
                        }
                    }
                    <td>
                        <DeleteButton @onclick="() => OpenDeleteModal(record.Id)" />
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <AddButton @onclick="AddRecord">Добавить строку</AddButton>

    <ConfirmDeleteModal IsVisible="_isDeleteModalVisible" OnClose="CloseDeleteModal" IdToDelete="_idToDelete" OnDeleteById="DeleteRecord" />

    <Modal IsVisible="_isEditColumnModalVisible" OnClose="CloseEditColumnModal">
        <div class="row">
            <div class="col d-flex align-items-center justify-content-center">
                <h3>Редактировать столбец</h3>
            </div>
        </div>
        <div class="row">
            <div class="col-md-12">
                <EditForm method="put" Model="_editColumnRequest" OnValidSubmit="UpdateColumn" FormName="edit" Enhance>
                    <div class="mb-3">
                        <label for="subject" class="form-label">Предмет: </label>
                        <InputSelect id="subject" @bind-Value="_editColumnRequest.SubjectId" class="form-control">
                            <option value="">(нет)</option>
                            @foreach (var s in GetSubjectsThatAreNotInCertificationType(_columnToEdit.CertificationTypeId, _columnToEdit.SubjectResponse?.Id))
                            {
                                <option @key="s.Id" value="@s.Id">@s.Name</option>
                            }
                        </InputSelect>
                    </div>
                    <div class="mb-3">
                        <ReferenceButton Uri="/Subjects">Предметы</ReferenceButton>
                    </div>
                    <div class="mb-3">
                        <EditButton type="submit" style="width:100%;">Сохранить</EditButton>
                    </div>
                </EditForm>
            </div>
        </div>
        <div class="row">
            <div class="col">
                <DeleteButton @onclick="() => OpenDeleteColumnModal(_columnToEdit.Id)" style="width:100%;">Удалить</DeleteButton>
            </div>
        </div>
    </Modal>

    <ConfirmDeleteModal IsVisible="_isDeleteColumnModalVisible" OnClose="CloseDeleteColumnModal" IdToDelete="_idToDelete" OnDeleteById="DeleteColumn" />

    <AlertBottom IsVisible="_isServerErrorAlertVisible" OnClose="CloseServerErrorAlert">@_errorMessage</AlertBottom>
}

@code {
    [Parameter]
    public int PageId { get; set; }

    [Parameter]
    public int JournalId { get; set; }

    private FinalPerformanceAccountingPageResponse? _pageData;

    private List<StudentResponse>? _students;
    private List<SubjectResponse>? _subjects;
    private List<CertificationTypeResponse>? _certificationTypes;

    private bool _isEditColumnModalVisible = false;
    private bool _isDeleteColumnModalVisible = false;

    [SupplyParameterFromForm]
    private UpdatePerformanceAccountingColumnRequest _editColumnRequest { get; set; } = new(-1);
    private PerformanceAccountingColumnResponse _columnToEdit { get; set; } = new(-1, -1, null);

    private bool _isAddColumnModalVisible = false;

    [SupplyParameterFromForm]
    private CreatePerformanceAccountingColumnRequest _addColumnRequest { get; set; } = new(null, null, -1);

    private Dictionary<int, string> _gradesIsPassedValues = [];

    protected override async Task OnInitializedAsync()
    {
        await JournalState.Initialize(JournalId, PageId);

        await FetchPageData();
        _students = await HttpClient.GetFromJsonAsync<List<StudentResponse>>("api/student/getbyjournal/" + JournalId.ToString());
        _subjects = await HttpClient.GetFromJsonAsync<List<SubjectResponse>>("api/subject");
        _certificationTypes = await HttpClient.GetFromJsonAsync<List<CertificationTypeResponse>>("api/certificationtype");

        UpdateGradesIsPassedValues();

        _addColumnRequest.PageId = PageId;
    }

    private void UpdateGradesIsPassedValues()
    {
        _gradesIsPassedValues.Clear();
        foreach (var record in _pageData!.Records)
        {
            foreach (var grade in record.Grades!)
            {
                _gradesIsPassedValues[grade.Id] = grade.IsPassed == null ? "" : grade.IsPassed.ToString();
            }
        }
    }

    private async Task FetchPageData()
    {
        _pageData = await HttpClient.GetFromJsonAsync<FinalPerformanceAccountingPageResponse>("api/journal/finalperformanceaccounting/" + PageId.ToString());
    }

    private int GetColumnCount() => _pageData!.CertificationTypes.SelectMany(ct => ct.PerformanceAccountingColumns!).Count();
    private IEnumerable<CertificationTypeResponse> GetNotEmptyCertificationTypes() => _pageData!.CertificationTypes.Where(ct => ct.PerformanceAccountingColumns!.Count != 0);

    private async Task UpdateRecord(PerformanceAccountingRecordResponse record)
    {
        _rowsWithErrors.Remove(record.Id);
        CloseServerErrorAlert();

        var request = new UpdatePerformanceAccountingRecordRequest(record.Number, record.StudentId);
        var response = await HttpClient.PutAsJsonAsync<UpdatePerformanceAccountingRecordRequest>("api/journal/finalperformanceaccounting/record/" + record.Id, request);

        if (!response.IsSuccessStatusCode)
        {
            _rowsWithErrors.Add(record.Id);
            var errorMessage = (await response.Content.ReadAsStringAsync()).Split('\n').FirstOrDefault();
            ShowServerErrorAlert(errorMessage);
        }
    }

    private async Task UpdateGrade(PerformanceAccountingGradeResponse grade)
    {
        _cellsWithErrors.Remove(grade.Id);
        CloseServerErrorAlert();

        var isPassedValue = _gradesIsPassedValues[grade.Id];
        var request = new UpdatePerformanceAccountingGradeRequest(isPassedValue == "" ? null : bool.Parse(isPassedValue), grade.Grade);
        var response = await HttpClient.PutAsJsonAsync<UpdatePerformanceAccountingGradeRequest>("api/journal/finalperformanceaccounting/grade/" + grade.Id, request);

        if (!response.IsSuccessStatusCode)
        {
            _cellsWithErrors.Add(grade.Id);
            var errorMessage = (await response.Content.ReadAsStringAsync()).Split('\n').FirstOrDefault();
            ShowServerErrorAlert(errorMessage);
        }
    }

    private async Task AddRecord()
    {
        var request = new CreatePerformanceAccountingRecordRequest(null, PageId, null);
        var response = await HttpClient.PostAsJsonAsync<CreatePerformanceAccountingRecordRequest>("api/journal/finalperformanceaccounting/record", request);

        if (response.IsSuccessStatusCode)
        {
            var addedRecord = await response.Content.ReadFromJsonAsync<PerformanceAccountingRecordResponse>();
            _pageData!.Records.Add(addedRecord!);
            UpdateGradesIsPassedValues();
        }
        else
        {
            var errorMessage = (await response.Content.ReadAsStringAsync()).Split('\n').FirstOrDefault();
            ShowServerErrorAlert(errorMessage);
        }
    }

    private async Task DeleteRecord(int recordId)
    {
        var response = await HttpClient.DeleteAsync("api/journal/finalperformanceaccounting/record/" + recordId);

        if (response.IsSuccessStatusCode)
        {
            _pageData!.Records.RemoveAll(r => r.Id == recordId);
            UpdateGradesIsPassedValues();
        }
        else
        {
            var errorMessage = (await response.Content.ReadAsStringAsync()).Split('\n').FirstOrDefault();
            ShowServerErrorAlert(errorMessage);
        }
    }

    private async Task UpdateColumn()
    {
        var response = await HttpClient.PutAsJsonAsync<UpdatePerformanceAccountingColumnRequest>
            ("api/journal/finalperformanceaccounting/column/" + _columnToEdit.Id, _editColumnRequest);

        if (response.IsSuccessStatusCode)
        {
            var updated = await response.Content.ReadFromJsonAsync<PerformanceAccountingColumnResponse>();
            _columnToEdit.SubjectResponse = updated!.SubjectResponse;

            StateHasChanged();
            CloseEditColumnModal();
        }
        else
        {
            var errorMessage = (await response.Content.ReadAsStringAsync()).Split('\n').FirstOrDefault();
            ShowServerErrorAlert(errorMessage);
        }
    }

    private async Task DeleteColumn(int id)
    {
        var response = await HttpClient.DeleteAsync("api/journal/finalperformanceaccounting/column/" + id);

        if (response.IsSuccessStatusCode)
        {
            var certificationType = _pageData!.CertificationTypes
                .FirstOrDefault(ct => ct.Id == _columnToEdit.CertificationTypeId);

            certificationType!.PerformanceAccountingColumns!.RemoveAll(r => r.Id == id);

            CloseEditColumnModal();
            UpdateGradesIsPassedValues();
        }
        else
        {
            var errorMessage = (await response.Content.ReadAsStringAsync()).Split('\n').FirstOrDefault();
            ShowServerErrorAlert(errorMessage);
        }
    }

    private async Task AddColumn()
    {
        var response = await HttpClient.PostAsJsonAsync<CreatePerformanceAccountingColumnRequest>("api/journal/finalperformanceaccounting/column", _addColumnRequest);

        if (response.IsSuccessStatusCode)
        {
            await FetchPageData();
            CloseAddColumnModal();
            UpdateGradesIsPassedValues();
        }
        else
        {
            var errorMessage = (await response.Content.ReadAsStringAsync()).Split('\n').FirstOrDefault();
            ShowServerErrorAlert(errorMessage);
        }
    }

    private void OpenEditColumnModal(PerformanceAccountingColumnResponse column)
    {
        _editColumnRequest = new UpdatePerformanceAccountingColumnRequest(column.SubjectResponse?.Id);
        _columnToEdit = column;
        _isEditColumnModalVisible = true;
    }

    private void CloseEditColumnModal()
    {
        _isEditColumnModalVisible = false;
        _editColumnRequest = new(-1);
        _columnToEdit = new(-1, -1, null);
    }

    private IEnumerable<SubjectResponse> GetSubjectsThatAreNotInCertificationType(int certificationTypeId, int? subjectId = null)
    {
        return _subjects!.Where(s => !_pageData!.CertificationTypes
                         .FirstOrDefault(ct => ct.Id == certificationTypeId)!
                         .PerformanceAccountingColumns!.Select(c => c.SubjectResponse?.Id)
                         .Contains(s.Id) || subjectId == s.Id);
    }

    private void CloseDeleteColumnModal()
    {
        _isDeleteColumnModalVisible = false;
        _idToDelete = null;
    }

    private void OpenDeleteColumnModal(int idToDelete)
    {
        _idToDelete = idToDelete;
        _isDeleteColumnModalVisible = true;
    }

    private void OpenAddColumnModal()
    {
        _isAddColumnModalVisible = true;
    }

    private void CloseAddColumnModal()
    {
        _isAddColumnModalVisible = false;
        _addColumnRequest = new(null, null, PageId);
    }

    private void ResetAddColumnRequestSubject(int? ctId)
    {
        _addColumnRequest.CertificationTypeId = ctId;
        _addColumnRequest.SubjectId = null;
    }

    private bool IsAddColumnModalSubjectSelectDisabled() => _addColumnRequest.CertificationTypeId == null;
}
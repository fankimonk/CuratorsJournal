@page "/journal/{journalId:int}/FinalPerformanceAccounting/{pageId:int}"

@using Contracts.CertificationTypes
@using Contracts.Journal
@using Contracts.Journal.FinalPerformanceAccounting
@using Contracts.Students
@using Frontend.Components.Buttons
@using Frontend.Services

@inject HttpClient HttpClient
@inject JournalState JournalState

<PageTitle>Учет итоговой успеваемости студентов группы</PageTitle>

<h3 class="d-flex justify-content-center">УЧЕТ ИТОГОВОЙ УСПЕВАЕМОСТИ СТУДЕНТОВ ГРУППЫ</h3>

@if (_pageData == null || _students == null)
{
    <p><em>Загрузка...</em></p>
}
else
{
    <table class="table table-bordered">
        <thead>
            <tr>
                <th rowspan="3" class="text-center align-middle">№</th>
                <th rowspan="3" class="text-center align-middle">Ф. И. О. студента</th>
                <th colspan="@GetColumnCount()" class="text-center align-middle">Название дисциплины</th>
            </tr>
            <tr>
                @foreach (var ct in GetNotEmptyCertificationTypes())
                {
                    <th colspan="@ct.PerformanceAccountingColumns!.Count" class="text-center align-middle">@ct.Name</th>
                }
            </tr>
            <tr>
                @foreach (var ct in GetNotEmptyCertificationTypes())
                {
                    @foreach (var column in ct.PerformanceAccountingColumns!)
                    {
                        <th class="text-center align-middle">@column.SubjectResponse?.Name</th>
                    }
                }
            </tr>
        </thead>
        <tbody>
            @foreach (var record in _pageData.Records)
            {
                <tr>
                    <td>
                        <input type="number" min="0" @bind="record.Number" @bind:after='async () => await UpdateRecord(record)' class="input fullwidth" />
                    </td>
                    <td>
                        <select @bind="record.StudentId" @bind:after="async () => await UpdateRecord(record)" class="input fullwidth">
                            <option value="">(нет)</option>
                            @foreach (var student in _students)
                            {
                                @if (record.StudentId == student.Id || !_pageData.Records.Any(a => a.StudentId == student.Id))
                                {
                                    <option @key="student.Id" value="@student.Id">@student.LastName @student.FirstName @student.MiddleName</option>
                                }
                            }
                        </select>
                    </td>
                    @foreach (var ct in GetNotEmptyCertificationTypes())
                    {
                        @foreach (var column in ct.PerformanceAccountingColumns!)
                        {
                            var grade = record.Grades!.FirstOrDefault(g => g.ColumnId == column.Id);
                            <td>
                                @if (ct.Id != 2)
                                {
                                    <input type="number" min="0" max="10" @bind="grade!.Grade" @bind:after="async () => await UpdateGrade(grade)" />
                                }
                                else
                                {
                                    <input type="checkbox" @bind="grade!.IsPassed" @bind:after="async () => await UpdateGrade(grade)" />
                                }
                            </td>
                        }
                    }
                    <td>
                        <DeleteButton @onclick="async () => await DeleteRecord(record)" />
                    </td>
                </tr>
            }
        </tbody>
    </table>
    <AddButton @onclick="AddRecord">Добавить строку</AddButton>
}

@code {
    [Parameter]
    public int PageId { get; set; }

    [Parameter]
    public int JournalId { get; set; }

    private FinalPerformanceAccountingPageResponse? _pageData;

    private List<StudentResponse>? _students;

    protected override async Task OnInitializedAsync()
    {
        await JournalState.Initialize(JournalId, PageId);

        _pageData = await HttpClient.GetFromJsonAsync<FinalPerformanceAccountingPageResponse>("api/journal/finalperformanceaccounting/" + PageId.ToString());
        _students = await HttpClient.GetFromJsonAsync<List<StudentResponse>>("api/student/getbyjournal/" + JournalId.ToString());
    }

    private int GetColumnCount() => _pageData!.CertificationTypes.SelectMany(ct => ct.PerformanceAccountingColumns!).Count();
    private IEnumerable<CertificationTypeResponse> GetNotEmptyCertificationTypes() => _pageData!.CertificationTypes.Where(ct => ct.PerformanceAccountingColumns!.Count != 0);

    private async Task UpdateRecord(PerformanceAccountingRecordResponse record)
    {
        var request = new UpdatePerformanceAccountingRecordRequest(record.Number, record.StudentId);
        var response = await HttpClient.PutAsJsonAsync<UpdatePerformanceAccountingRecordRequest>("api/journal/finalperformanceaccounting/record/" + record.Id, request);

        if (!response.IsSuccessStatusCode)
        {
            //TODO
        }
    }

    private async Task UpdateGrade(PerformanceAccountingGradeResponse grade)
    {
        var request = new UpdatePerformanceAccountingGradeRequest(grade.IsPassed, grade.Grade);
        var response = await HttpClient.PutAsJsonAsync<UpdatePerformanceAccountingGradeRequest>("api/journal/finalperformanceaccounting/grade/" + grade.Id, request);

        if (!response.IsSuccessStatusCode)
        {
            //TODO
        }
    }

    private async Task AddRecord()
    {
        var request = new CreatePerformanceAccountingRecordRequest(null, PageId, null);
        var response = await HttpClient.PostAsJsonAsync<CreatePerformanceAccountingRecordRequest>("api/journal/finalperformanceaccounting/record", request);

        if (response.IsSuccessStatusCode)
        {
            var addedRecord = await response.Content.ReadFromJsonAsync<PerformanceAccountingRecordResponse>();
            _pageData!.Records.Add(addedRecord!);
        }
    }

    private async Task DeleteRecord(PerformanceAccountingRecordResponse record)
    {
        var response = await HttpClient.DeleteAsync("api/journal/finalperformanceaccounting/record/" + record.Id);

        if (response.IsSuccessStatusCode) _pageData!.Records.Remove(record);
    }
}
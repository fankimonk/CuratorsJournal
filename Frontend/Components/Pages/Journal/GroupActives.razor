@page "/journal/{journalId:int}/GroupActives/{pageId:int}"
@rendermode InteractiveServer

@using Contracts.Journal.GroupActives
@using Contracts.Students
@using Contracts.Mappers.Journal
@using Frontend.Services

@inject HttpClient HttpClient
@inject JournalState JournalState

<PageTitle>Актив учебной группы</PageTitle>

<h3 class="d-flex justify-content-center">АКТИВ УЧЕБНОЙ ГРУППЫ</h3>

@if (_pageData == null || _students == null)
{
    <p><em>Загрузка...</em></p>
}
else
{
    var i = 0;
    @foreach (var active in _pageData.GroupActives)
    {
        <p>
            @if (i > 2)
            {
                <input @bind="active.PositionName" @bind:after="async () => await Update(active)" class="input underline" /> 
            }
            else
            {
                @(active.PositionName + " ")
            }
            <select @bind="active.StudentId" @bind:after="async () => await Update(active)" class="input underline" >
                <option value="">(нет)</option>
                @foreach (var student in _students)
                {
                    @if (active.StudentId == student.Id || !_pageData.GroupActives.Any(a => a.StudentId == student.Id))
                    {
                        <option @key="student.Id" value="@student.Id">@student.LastName @student.FirstName @student.MiddleName</option>
                    }
                }
            </select>
            @if (i > 2)
            {
                <button @onclick="async () => await Delete(active)" class="btn btn-close" />
            }
        </p>
        i++;
    }
    <button @onclick="Add" class="btn btn-outline-primary">Добавить</button>
}

@code {
    [Parameter]
    public int PageId { get; set; }

    [Parameter]
    public int JournalId { get; set; }

    private GroupActivesPageResponse? _pageData;

    private List<StudentResponse>? _students;

    protected override async Task OnInitializedAsync()
    {
        JournalState.Initialize(JournalId, PageId);

        _pageData = await HttpClient.GetFromJsonAsync<GroupActivesPageResponse>("api/journal/groupactive/" + PageId.ToString());
        _students = await HttpClient.GetFromJsonAsync<List<StudentResponse>>("api/student/getbyjournal/" + JournalId.ToString());
    }

    private async Task Update(GroupActiveResponse active)
    {
        Console.WriteLine("Update group active");

        var request = active.ToRequest();
        var response = await HttpClient.PutAsJsonAsync<UpdateGroupActiveRequest>("api/journal/groupactive/" + active.Id, request);

        if (!response.IsSuccessStatusCode)
        {
            //TODO
        }
    }

    private async Task Add()
    {
        Console.WriteLine("Add group active");

        var request = new CreateGroupActiveRequest(null, null, PageId);
        var response = await HttpClient.PostAsJsonAsync<CreateGroupActiveRequest>("api/journal/groupactive", request);

        if (response.IsSuccessStatusCode)
        {
            var addedActive = await response.Content.ReadFromJsonAsync<GroupActiveResponse>();
            _pageData!.GroupActives.Add(addedActive!);
        }
    }

    private async Task Delete(GroupActiveResponse active)
    {
        Console.WriteLine("Delete group active");

        var response = await HttpClient.DeleteAsync("api/journal/groupactive/" + active.Id);

        if (response.IsSuccessStatusCode) _pageData!.GroupActives.Remove(active);
    }
}

<style>
    .input {
        border: none;
        outline: none;
        background: transparent;
    }

    .underline {
        border-bottom: 1px solid #000;
    }
</style>
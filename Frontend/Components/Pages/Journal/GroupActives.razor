@page "/journal/{journalId:int}/GroupActives/{pageId:int}"

@inherits CRUDPageBase

@attribute [Authorize]

@using Contracts.Groups
@using Contracts.Journal.GroupActives
@using Contracts.Students
@using Contracts.Mappers.Journal
@using Frontend.Components.Buttons
@using Frontend.Components.Utils
@using Frontend.Services

@inject HttpClient HttpClient
@inject JournalState JournalState
@inject AppState AppState

<PageTitle>Актив учебной группы</PageTitle>

<h3 class="d-flex justify-content-center">АКТИВ УЧЕБНОЙ ГРУППЫ</h3>

@if (_pageData == null || _students == null)
{
    <p><em>Загрузка...</em></p>
}
else
{
    <ReferenceButton Uri="@GetStudentsRefPageUri()" AdditionalClasses="mb-3">Студенты</ReferenceButton>

    var i = 0;
    @foreach (var active in _pageData.GroupActives)
    {
        <p class="flex-container">
            @if (i > 2 && _canEdit)
            {
                <input @bind="active.PositionName" @bind:after="async () => await Update(active)" class="input underline flex-input" /> 
            }
            else
            {
                @(active.PositionName + " ")
            }
            @if (!_canEdit)
            {
                var studentFIO = "";
                var student = _students.FirstOrDefault(s => s.Id == active.StudentId);
                if (student != null) studentFIO = student.LastName + " " + student.FirstName + " " + student.MiddleName;
                <span class="flex-input" style="text-decoration: underline;">@studentFIO</span>
            }
            else
            {
                <select @bind="active.StudentId" @bind:after="async () => await Update(active)" class="input underline flex-input">
                    <option value="">(нет)</option>
                    @foreach (var student in _students)
                    {
                        @if (active.StudentId == student.Id || !_pageData.GroupActives.Any(a => a.StudentId == student.Id))
                        {
                            <option @key="student.Id" value="@student.Id">@student.LastName @student.FirstName @student.MiddleName</option>
                        }
                    }
                </select>
            }
            @* @if (i > 2 && _canEdit)
            {
                <DeleteButton @onclick="() => OpenDeleteModal(active.Id)" />
            } *@
        </p>
        i++;
    }
    @* if (_canEdit)
    {
        <AddButton @onclick="Add">Добавить</AddButton>
    } *@

    @* <ConfirmDeleteModal IsVisible="_isDeleteModalVisible" OnClose="CloseDeleteModal" IdToDelete="_idToDelete" OnDeleteById="Delete" /> *@

    <AlertBottom IsVisible="_isServerErrorAlertVisible" OnClose="CloseServerErrorAlert">@_errorMessage</AlertBottom>
}

@code {
    [Parameter]
    public int PageId { get; set; }

    [Parameter]
    public int JournalId { get; set; }

    private GroupActivesPageResponse? _pageData;

    private List<StudentResponse>? _students;

    private bool _canEdit => !JournalState.IsCurrentPageApproved && AppState.CanEditJournal;

    protected override async Task OnInitializedAsync()
    {
        JournalState.OnToggleIsApproved += StateHasChanged;
    }

    protected override async Task OnParametersSetAsync()
    {
        await JournalState.Initialize(JournalId, PageId);

        _pageData = await HttpClient.GetFromJsonAsync<GroupActivesPageResponse>("api/journal/groupactive/" + PageId.ToString());
        _students = await HttpClient.GetFromJsonAsync<List<StudentResponse>>("api/student/getbyjournal/" + JournalId.ToString());

        var groupResponse = await HttpClient.GetFromJsonAsync<GroupResponse>("api/group/getbyjournal/" + JournalId);
        if (groupResponse != null) _groupId = groupResponse.Id;
    }

    private async Task Update(GroupActiveResponse active)
    {
        var request = active.ToRequest();
        var response = await HttpClient.PutAsJsonAsync<UpdateGroupActiveRequest>("api/journal/groupactive/" + active.Id, request);

        if (!response.IsSuccessStatusCode)
        {
            var errorMessage = (await response.Content.ReadAsStringAsync()).Split('\n').FirstOrDefault();
            ShowServerErrorAlert(errorMessage);
        }
    }

    // private async Task Add()
    // {
    //     var request = new CreateGroupActiveRequest(null, null, PageId);
    //     var response = await HttpClient.PostAsJsonAsync<CreateGroupActiveRequest>("api/journal/groupactive", request);

    //     if (response.IsSuccessStatusCode)
    //     {
    //         var addedActive = await response.Content.ReadFromJsonAsync<GroupActiveResponse>();
    //         _pageData!.GroupActives.Add(addedActive!);
    //     }
    //     else
    //     {
    //         var errorMessage = (await response.Content.ReadAsStringAsync()).Split('\n').FirstOrDefault();
    //         ShowServerErrorAlert(errorMessage);
    //     }
    // }

    // private async Task Delete(int activeId)
    // {
    //     var response = await HttpClient.DeleteAsync("api/journal/groupactive/" + activeId);

    //     if (response.IsSuccessStatusCode) _pageData!.GroupActives.RemoveAll(a => a.Id == activeId);
    //     else
    //     {
    //         var errorMessage = (await response.Content.ReadAsStringAsync()).Split('\n').FirstOrDefault();
    //         ShowServerErrorAlert(errorMessage);
    //     }
    // }
}
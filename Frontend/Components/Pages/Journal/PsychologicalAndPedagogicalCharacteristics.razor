@page "/journal/{journalId:int}/PsychologicalAndPedagogicalCharacteristics/{pageId:int}"

@inherits CRUDPageBase

@attribute [Authorize]

@using Contracts.Journal.PsychologicalAndPedagogicalCharacteristics
@using Contracts.Mappers
@using Contracts.Mappers.Journal
@using Contracts.Workers
@using Frontend.Components.Buttons
@using Frontend.Components.Utils
@using Frontend.Services

@inject HttpClient HttpClient
@inject JournalState JournalState
@inject AppState AppState

<PageTitle>Психолого-педагогическая характеристика учебной группы</PageTitle>

<h3 class="d-flex justify-content-center">ПСИХОЛОГО-ПЕДАГОГИЧЕСКАЯ</h3>
<h3 class="d-flex justify-content-center">ХАРАКТЕРИСТИКА УЧЕБНОЙ ГРУППЫ</h3>

@if (_pageData == null || _workers == null)
{
    <p><em>Загрузка...</em></p>
}
else
{
    @if (_canEdit)
    {
        <textarea rows="28" @bind="_pageData.Content" @bind:after="Update" class="fullwidth" style="resize:none;" />
    }
    else
    {
        <p>@_pageData.Content</p>
    }
    <p>
        Ф. И. О., должность специалиста
        @if (_canEdit)
        {
            <select @bind="_pageData.WorkerId" @bind:after="Update" class="input underline">
                <option value="">-- Выберите специалиста --</option>
                @foreach (var worker in _workers)
                {
                    <option @key="worker.Id" value="@worker.Id">
                        @worker.LastName @worker.FirstName @worker.MiddleName,
                        @worker.Position.Name
                    </option>
                }
            </select>
            <ReferenceButton Uri="/Workers" ButtonSize="ButtonSizes.Small" />
        }
        else
        {
            var worker = _workers.FirstOrDefault(w => w.Id == _pageData.WorkerId);
            if (worker != null)
            {
                <span>
                    @worker.LastName @worker.FirstName @worker.MiddleName,
                    @worker.Position.Name
                </span>
            }
            else
            {
                <span></span>
            }
        }
    </p>
    <p>
        Дата 
        @if (_canEdit)
        {
            <input type="date" @bind="_pageData.Date" @bind:after="Update" class="input underline" />
        }
        else
        {
            @(_pageData.Date.ToString())
        }
    </p>

    <AlertBottom IsVisible="_isServerErrorAlertVisible" OnClose="CloseServerErrorAlert">@_errorMessage</AlertBottom>
}

@code {
    [Parameter]
    public int PageId { get; set; }

    [Parameter]
    public int JournalId { get; set; }

    private PsychologicalAndPedagogicalCharacteristicsResponse? _pageData;

    private List<WorkerResponse>? _workers;

    private bool _canEdit => !JournalState.IsCurrentPageApproved && AppState.CanApprovePages;

    protected override async Task OnInitializedAsync()
    {
        JournalState.OnToggleIsApproved += StateHasChanged;
    }

    protected override async Task OnParametersSetAsync()
    {
        await JournalState.Initialize(JournalId, PageId);

        _pageData = await HttpClient.GetFromJsonAsync<PsychologicalAndPedagogicalCharacteristicsResponse>
            ("api/journal/psychologicalpedagogicalcharacteristics/" + PageId.ToString());

        _workers = await HttpClient.GetFromJsonAsync<List<WorkerResponse>>("api/worker/");
    }

    private async Task Update()
    {
        var request = _pageData!.ToRequest();
        var response = await HttpClient.PutAsJsonAsync<UpdatePsychologicalAndPedagogicalCharacteristicsRequest>
            ("api/journal/psychologicalpedagogicalcharacteristics/" + _pageData!.Id, request);

        if (!response.IsSuccessStatusCode)
        {
            var errorMessage = (await response.Content.ReadAsStringAsync()).Split('\n').FirstOrDefault();
            ShowServerErrorAlert(errorMessage);
        }
    }
}
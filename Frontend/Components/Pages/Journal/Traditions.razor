@page "/journal/{journalId:int}/Traditions/{pageId:int}"

@inherits TablePageBase

@using Contracts.Journal.Traditions
@using Contracts.Mappers
@using Contracts.Mappers.Journal
@using Frontend.Components.Buttons
@using Frontend.Components.Utils
@using Frontend.Services
@using Frontend.Utils

@inject HttpClient HttpClient
@inject JournalState JournalState

<PageTitle>Традиции ВУЗа, факультета, группы</PageTitle>

<h3 class="d-flex justify-content-center">ТРАДИЦИИ ВУЗА, ФАКУЛЬТЕТА, ГРУППЫ</h3>

@if (_pageData == null)
{
    <p><em>Загрузка...</em></p>
}
else
{
    <table class="table table-bordered">
        <thead>
            <tr>
                <th class="col-3 text-center">Название традиции</th>
                <th class="col-3 text-center">Дата</th>
                <th class="col-3 text-center">Форма участия группы</th>
                <th class="col-3 text-center">Примечание</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var record in _pageData.Traditions)
            {
                <tr class="@GetRowClass(record.Id)">
                    <td>
                        <input @bind="record.Name" @bind:after="async () => await Update(record)" class="input fullwidth" />
                    </td>
                    <td>
                        <input type="number" min="1" max="31" onkeypress="return (event.charCode !=8 && event.charCode ==0 || (event.charCode >= 48 && event.charCode <= 57))"
                            @bind="record.Day" @bind:after="async () => await Update(record)" class="input" />.
                        <select @bind="record.Month" @bind:after="async () => await Update(record)" class="input">
                            <option value="">(нет)</option>
                            @foreach (var m in MonthsUtils.MonthsDateNames)
                            {
                                <option @key="m.Key" value="@m.Key">@m.Value</option>
                            }
                        </select>
                    </td>
                    <td>
                        <input @bind="record.ParticipationForm" @bind:after="async () => await Update(record)" class="input fullwidth" />
                    </td>
                    <td>
                        <input @bind="record.Note" @bind:after="async () => await Update(record)" class="input fullwidth" />
                    </td>
                    <td>
                        <DeleteButton @onclick="() => OpenDeleteModal(record.Id)" />
                    </td>
                </tr>
            }
        </tbody>
    </table>
    <AddButton @onclick="Add">Добавить строку</AddButton>

    <ConfirmDeleteModal IsVisible="_isDeleteModalVisible" OnClose="CloseDeleteModal" IdToDelete="_idToDelete" OnDeleteById="Delete" />

    <AlertBottom IsVisible="_isServerErrorAlertVisible" OnClose="CloseServerErrorAlert">@_errorMessage</AlertBottom>
}

@code {
    [Parameter]
    public int PageId { get; set; }

    [Parameter]
    public int JournalId { get; set; }

    public TraditionsPageResponse? _pageData;

    protected override async Task OnInitializedAsync()
    {
        await JournalState.Initialize(JournalId, PageId);

        _pageData = await HttpClient.GetFromJsonAsync<TraditionsPageResponse>("api/journal/tradition/" + PageId.ToString());
    }

    private async Task Update(TraditionResponse record)
    {
        _rowsWithErrors.Remove(record.Id);
        CloseServerErrorAlert();

        var request = record.ToRequest();
        var response = await HttpClient.PutAsJsonAsync<UpdateTraditionRequest>("api/journal/tradition/" + record.Id, request);

        if (!response.IsSuccessStatusCode)
        {
            _rowsWithErrors.Add(record.Id);
            var errorMessage = (await response.Content.ReadAsStringAsync()).Split('\n').FirstOrDefault();
            ShowServerErrorAlert(errorMessage);
        }
    }

    private async Task Add()
    {
        var request = new CreateTraditionRequest(null, null, null, null, null, PageId);
        var response = await HttpClient.PostAsJsonAsync<CreateTraditionRequest>("api/journal/tradition", request);

        if (response.IsSuccessStatusCode)
        {
            var addedRecord = await response.Content.ReadFromJsonAsync<TraditionResponse>();
            _pageData!.Traditions.Add(addedRecord!);
        }
        else
        {
            var errorMessage = (await response.Content.ReadAsStringAsync()).Split('\n').FirstOrDefault();
            ShowServerErrorAlert(errorMessage);
        }
    }

    private async Task Delete(int recordId)
    {
        var response = await HttpClient.DeleteAsync("api/journal/tradition/" + recordId);

        if (response.IsSuccessStatusCode) _pageData!.Traditions.RemoveAll(r => r.Id == recordId);
        else
        {
            var errorMessage = (await response.Content.ReadAsStringAsync()).Split('\n').FirstOrDefault();
            ShowServerErrorAlert(errorMessage);
        }
    }
}
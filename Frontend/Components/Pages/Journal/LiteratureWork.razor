@page "/journal/{journalId:int}/LiteratureWork/{pageId:int}"

@inherits TablePageBase

@using Contracts.Journal
@using Contracts.Journal.LiteratureWork
@using Contracts.Literature
@using Contracts.Mappers.Journal
@using Frontend.Components.Buttons
@using Frontend.Components.Utils
@using Frontend.Services

@inject HttpClient HttpClient
@inject JournalState JournalState
@inject IJSRuntime JSRuntime

<PageTitle>Работа с научно-методической и педагогической литературой</PageTitle>

<h3 class="d-flex justify-content-center">РАБОТА С НАУЧНО-МЕТОДИЧЕСКОЙ И ПЕДАГОГИЧЕСКОЙ ЛИТЕРАТУРОЙ</h3>
<h3 class="d-flex justify-content-center">по вопросам идеологии и воспитания</h3>

@if (_pageData == null || _literature == null)
{
    <p><em>Загрузка...</em></p>
}
else
{
    <table class="table table-bordered">
        <thead>
            <tr>
                <th class="col-5 text-center align-middle">
                    Автор, название, библиографические данные
                    <ReferenceButton Uri="/Literature" ButtonSize="ButtonSizes.Small" />
                </th>
                <th class="col-7 text-center align-middle">Краткая аннотация</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var record in _pageData.LiteratureWork)
            {
                <tr class="@GetRowClass(record.Id)">
                    <td>
                        <select @bind="record.LiteratureId" @bind:after="async () => await Update(record)" class="input fullwidth">
                            <option value="">(нет)</option>
                            @foreach (var l in _literature)
                            {
                                <option @key="l.Id" value="@l.Id">
                                    @l.Author, "@l.Name", @l.BibliographicData
                                </option>
                            }
                        </select>
                    </td>
                    <td>
                        <textarea rows="1" style="overflow:hidden; resize:none;" oninput="this.style.height = 'auto'; this.style.height = (this.scrollHeight) + 'px';"
                            @bind="record.ShortAnnotation" @bind:after='async () => await Update(record)' class="input fullwidth" />
                    </td>
                    <td>
                        <DeleteButton @onclick="() => OpenDeleteModal(record.Id)"/>
                    </td>
                </tr>
            }

        </tbody>
    </table>
    <AddButton @onclick="Add">Добавить строку</AddButton>

    <ConfirmDeleteModal IsVisible="_isDeleteModalVisible" OnClose="CloseDeleteModal" IdToDelete="_idToDelete" OnDeleteById="Delete" />

    <AlertBottom IsVisible="_isServerErrorAlertVisible" OnClose="CloseServerErrorAlert">@_errorMessage</AlertBottom>
}

@code {
    [Parameter]
    public int PageId { get; set; }

    [Parameter]
    public int JournalId { get; set; }

    private LiteratureWorkPageResponse? _pageData;

    private List<LiteratureResponse>? _literature;

    protected override async Task OnInitializedAsync()
    {
        await JournalState.Initialize(JournalId, PageId);

        _pageData = await HttpClient.GetFromJsonAsync<LiteratureWorkPageResponse>("api/journal/literaturework/" + PageId.ToString());
        _literature = await HttpClient.GetFromJsonAsync<List<LiteratureResponse>>("api/literature/");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await Task.Delay(10);
        await JSRuntime.InvokeVoidAsync("resizeTextAreas");
    }

    private async Task Update(LiteratureWorkRecordResponse record)
    {
        _rowsWithErrors.Remove(record.Id);
        CloseServerErrorAlert();

        var request = record.ToRequest();
        var response = await HttpClient.PutAsJsonAsync<UpdateLiteratureWorkRecordRequest>("api/journal/literaturework/" + record.Id, request);

        if (!response.IsSuccessStatusCode)
        {
            _rowsWithErrors.Add(record.Id);
            var errorMessage = (await response.Content.ReadAsStringAsync()).Split('\n').FirstOrDefault();
            ShowServerErrorAlert(errorMessage);
        }
    }

    private async Task Add()
    {
        var request = new CreateLiteratureWorkRecordRequest(null, null, PageId);
        var response = await HttpClient.PostAsJsonAsync<CreateLiteratureWorkRecordRequest>("api/journal/literaturework", request);

        if (response.IsSuccessStatusCode)
        {
            var addedRecord = await response.Content.ReadFromJsonAsync<LiteratureWorkRecordResponse>();
            _pageData!.LiteratureWork.Add(addedRecord!);
        }
        else
        {
            var errorMessage = (await response.Content.ReadAsStringAsync()).Split('\n').FirstOrDefault();
            ShowServerErrorAlert(errorMessage);
        }
    }

    private async Task Delete(int recordId)
    {
        var response = await HttpClient.DeleteAsync("api/journal/literaturework/" + recordId);

        if (response.IsSuccessStatusCode) _pageData!.LiteratureWork.RemoveAll(r => r.Id == recordId);
        else
        {
            var errorMessage = (await response.Content.ReadAsStringAsync()).Split('\n').FirstOrDefault();
            ShowServerErrorAlert(errorMessage);
        }
    }
}
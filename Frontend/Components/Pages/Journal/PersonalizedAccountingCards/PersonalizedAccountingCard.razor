@page "/journal/{journalId:int}/PersonalizedAccountingCard/{pageId:int}"

@inherits PageBase

@using Contracts.Journal.PersonalizedAccountingCards
@using Contracts.Students
@using Contracts.Mappers.Journal.PersonalizedAccountingCards
@using Frontend.Components.Buttons
@using Frontend.Components.Utils
@using Frontend.Services

@inject HttpClient HttpClient
@inject JournalState JournalState
@inject IJSRuntime JSRuntime

<PageTitle>Карта персонифицированного учета</PageTitle>

<h3 class="d-flex justify-content-center">КАРТА ПЕРСОНИФИЦИРОВАННОГО УЧЕТА</h3>

@if (_pageData == null || _students == null)
{
    <p><em>Загрузка...</em></p>
}
else
{
    <p class="flex-container">
        <b>Фамилия, имя отчество </b>
        <select @bind="_pageData.StudentId" @bind:after="Update" class="input underline flex-input">
            <option value="">(нет)</option>
            @foreach (var student in _students)
            {
                <option @key="student.Id" value="@student.Id">@student.LastName @student.FirstName @student.MiddleName</option>
            }
        </select>
        <ReferenceButton ButtonSize="ButtonSizes.Small" />
    </p>
    <p class="flex-container">
        Дата рождения 
        <input type="date" @bind="_pageData.BirthDate" @bind:after="Update" class="input underline flex-input" />
    </p>
    <p>
        Паспортные данные <br/>
        <textarea rows="1" style="overflow:hidden; resize:none;" oninput="this.style.height = 'auto'; this.style.height = (this.scrollHeight) + 'px';"
            @bind="_pageData.PassportData" @bind:after="Update" class="input underline fullwidth" />
    </p>
    <p class="flex-container">
        гражданство
        <input @bind="_pageData.Citizenship" @bind:after="Update" class="input underline flex-input" />
    </p>
    <p>
        Окончил УО <br/>
        <textarea rows="1" style="overflow:hidden; resize:none;" oninput="this.style.height = 'auto'; this.style.height = (this.scrollHeight) + 'px';"
            @bind="_pageData.GraduatedEducationalInstitution" @bind:after="Update" class="input underline fullwidth" />
    </p>
    <p>
        Место и адрес проживания в период обучения <br/>
        <textarea rows="1" style="overflow:hidden; resize:none;" oninput="this.style.height = 'auto'; this.style.height = (this.scrollHeight) + 'px';"
            @bind="_pageData.ResidentialAddress" @bind:after="Update" class="input underline fullwidth" />
    </p>

    <div class="mb-5"></div>

    <div class="mb-5">
        <ParentalInformation CardId="_pageData.Id" />
    </div>

    <IndividualInformation CardId="_pageData.Id" />
    <StudentEncouragements CardId="_pageData.Id" />
    <StudentDisciplinaryResponsibilities CardId="_pageData.Id" />
    <IndividualWorkWithStudent CardId="_pageData.Id" />
    <WorkWithParents CardId="_pageData.Id" />

    <AlertBottom IsVisible="_isServerErrorAlertVisible" OnClose="CloseServerErrorAlert">@_errorMessage</AlertBottom>
}

@code {
    [Parameter]
    public int PageId { get; set; }

    [Parameter]
    public int JournalId { get; set; }

    private PersonalizedAccountingCardResponse? _pageData;

    private List<StudentResponse>? _students;

    protected override async Task OnInitializedAsync()
    {
        await JournalState.Initialize(JournalId, PageId);

        _pageData = await HttpClient.GetFromJsonAsync<PersonalizedAccountingCardResponse>("api/journal/personalizedaccountingcard/" + PageId.ToString());
        _students = await HttpClient.GetFromJsonAsync<List<StudentResponse>>("api/student/getbyjournal/" + JournalId.ToString());
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await Task.Delay(10);
        await JSRuntime.InvokeVoidAsync("resizeTextAreas");
    }

    private async Task Update()
    {
        var request = _pageData!.ToRequest();
        var response = await HttpClient.PutAsJsonAsync<UpdatePersonalizedAccountingCardRequest>
            ("api/journal/personalizedaccountingcard/" + _pageData!.Id, request);

        if (!response.IsSuccessStatusCode)
        {
            var errorMessage = (await response.Content.ReadAsStringAsync()).Split('\n').FirstOrDefault();
            ShowServerErrorAlert(errorMessage);
        }
    }
}
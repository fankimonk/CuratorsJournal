@page "/journal/{journalId:int}/PersonalizedAccountingCard/{pageId:int}"

@inherits CRUDPageBase

@using Contracts.ChronicDiseases
@using Contracts.Groups
@using Contracts.Journal.PersonalizedAccountingCards
@using Contracts.PEGroups
@using Contracts.Students
@using Contracts.Mappers.Journal.PersonalizedAccountingCards
@using Contracts.Students.ChronicDiseases
@using Contracts.Students.PEGroups
@using Frontend.Components.Buttons
@using Frontend.Components.Pages.Journal.PersonalizedAccountingCards.Modals
@using Frontend.Components.Utils
@using Frontend.Services
@using Frontend.Utils.Extensions

@inject HttpClient HttpClient
@inject JournalState JournalState
@inject IJSRuntime JSRuntime
@inject AppState AppState

<PageTitle>Карта персонифицированного учета</PageTitle>

<h3 class="d-flex justify-content-center">КАРТА ПЕРСОНИФИЦИРОВАННОГО УЧЕТА</h3>

@if (_pageData == null || _students == null || _studentIdsThatHaveCards == null)
{
    <p><em>Загрузка...</em></p>
}
else
{
    <p class="flex-container">
        <b>Фамилия, имя отчество </b>
        @if (_canEdit)
        {
            <select @bind="_pageData.StudentId" @bind:after="Update" class="input underline flex-input">
                <option value="">(нет)</option>
                @foreach (var student in Students)
                {
                    <option @key="student.Id" value="@student.Id">@student.LastName @student.FirstName @student.MiddleName</option>
                }
            </select>
            <ReferenceButton Uri="@GetStudentsRefPageUri()" ButtonSize="ButtonSizes.Small" />
        }
        else
        {
            var student = _students.FirstOrDefault(s => s.Id == _pageData.StudentId);
            if (student != null)
            {
                <span style="text-decoration: underline;"> @student.GetFIO()</span>
            }
            else
            {
                <span></span>
            }
        }
    </p>
    <p class="flex-container">
        Дата рождения 
        @if (_canEdit)
        {
            <input type="date" @bind="_pageData.BirthDate" @bind:after="Update" class="input underline flex-input" />
        }
        else
        {
            <span style="text-decoration: underline;"> @_pageData.BirthDate.ToString()</span>
        }
    </p>
    <p>
        Паспортные данные <br/>
        @if (_canEdit)
        {
            <textarea rows="1" style="overflow:hidden; resize:none;" oninput="this.style.height = 'auto'; this.style.height = (this.scrollHeight) + 'px';"
            @bind="_pageData.PassportData" @bind:after="Update" class="input underline fullwidth" />
        }
        else
        {
            <span style="text-decoration: underline;">@_pageData.PassportData</span>
        }
    </p>
    <p class="flex-container">
        гражданство
        @if (_canEdit)
        {
            <input @bind="_pageData.Citizenship" @bind:after="Update" class="input underline flex-input" />
        }
        else
        {
            <span style="text-decoration: underline;"> @_pageData.Citizenship</span>
        }
    </p>
    <p>
        Окончил УО <br/>
        @if (_canEdit)
        {
            <textarea rows="1" style="overflow:hidden; resize:none;" oninput="this.style.height = 'auto'; this.style.height = (this.scrollHeight) + 'px';"
            @bind="_pageData.GraduatedEducationalInstitution" @bind:after="Update" class="input underline fullwidth" />
        }
        else
        {
            <span style="text-decoration: underline;">@_pageData.GraduatedEducationalInstitution</span>
        }
    </p>
    <p>
        Место и адрес проживания в период обучения <br/>
        @if (_canEdit)
        {
            <textarea rows="1" style="overflow:hidden; resize:none;" oninput="this.style.height = 'auto'; this.style.height = (this.scrollHeight) + 'px';"
            @bind="_pageData.ResidentialAddress" @bind:after="Update" class="input underline fullwidth" />
        }
        else
        {
            <span style="text-decoration: underline;">@_pageData.ResidentialAddress</span>
        }
    </p>

    @if (_pageData.StudentId != null)
    {
        <h5><b>Сведения о состоянии здоровья</b></h5>

        <p>
            <div class="me-2 mb-2">
                Хронические заболевания
                <ReferenceButton ButtonSize="ButtonSizes.Small" Uri="/ChronicDiseases" />
            </div>
            @if (_studentChronicDiseases == null)
            {
                <em>Загрузка...</em>
            }
            else
            {
                @foreach (var cd in _studentChronicDiseases)
                {
                    @if (_canEdit)
                    {
                        <DeletableChip @onclick='() => OpenDeleteDiseaseModal(cd.Id)'>@cd.Name</DeletableChip>
                    }
                    else
                    {
                        var diseaseStr = cd.Name;
                        if (cd != _studentChronicDiseases.Last()) diseaseStr += ", ";
                        <span>@diseaseStr</span>
                    }
                }
                @if (_canEdit)
                {
                    <AddButton @onclick='OpenAddDiseaseModal' style="margin-bottom: 8px;" />

                    <AddChronicDiseaseModal IsVisible="_isAddDiseaseModalVisible"
                    StudentId="(int)_pageData.StudentId"
                    AddDiseaseRequest="ChronicDiseaseToAdd"
                    CreateDiseaseReqeust="CreateDiseaseRequest"
                    ChronicDiseases="_chronicDiseases"
                    StudentChronicDiseases="_studentChronicDiseases"
                    OnClose="CloseAddDiseaseModal"
                    AddDiseaseToPage="AddDiseaseToPage"
                    AddDisease="AddDisease"
                    ShowServerErrorAlert="ShowServerErrorAlert" />
                }
            }
        </p>
        <p>
            <div class="me-2 mb-2">
                Группы по физической культуре (основная специальная)
                <ReferenceButton ButtonSize="ButtonSizes.Small" Uri="/PEGroups" />
            </div>
            @if (_studentPEGroups == null)
            {
                <em>Загрузка...</em>
            }
            else
            {
                @foreach (var pe in _studentPEGroups)
                {
                    @if (_canEdit)
                    {
                        <DeletableChip @onclick='() => OpenDeletePEGroupModal(pe.Id)'>@pe.Name</DeletableChip>
                    }
                    else
                    {
                        var groupStr = pe.Name;
                        if (pe != _studentPEGroups.Last()) groupStr += ", ";
                        <span>@groupStr</span>
                    }
                }
                @if (_canEdit)
                {
                    <AddButton @onclick='OpenAddPEGroupModal' style="margin-bottom: 8px;" />

                    <AddPEGroupModal IsVisible="_isAddPEGroupModalVisible"
                    StudentId="(int)_pageData.StudentId"
                    AddPEGroupRequest="PEGroupToAdd"
                    CreatePEGroupReqeust="CreatePEGroupRequest"
                    PEGroups="_peGroups"
                    StudentPEGroups="_studentPEGroups"
                    OnClose="CloseAddPEGroupModal"
                    AddPEGroupToPage="AddPEGroupToPage"
                    AddPEGroup="AddPEGroup"
                    ShowServerErrorAlert="ShowServerErrorAlert" />
                }
            }
        </p>

    }

    <div class="mb-5"></div>

    <div class="mb-5">
        <ParentalInformation CardId="_pageData.Id" CanEdit="_canEdit" />
    </div>
    <div class="mb-5">
        <IndividualInformation CardId="_pageData.Id" CanEdit="_canEdit" />
    </div>
    <div class="mb-5">
        <StudentEncouragements CardId="_pageData.Id" CanEdit="_canEdit" />
    </div>
    <div class="mb-5">
        <StudentDisciplinaryResponsibilities CardId="_pageData.Id" CanEdit="_canEdit" />
    </div>
    <div class="mb-5">
        <IndividualWorkWithStudent CardId="_pageData.Id" CanEdit="_canEdit" />
    </div>
    <div class="mb-5">
        <WorkWithParents CardId="_pageData.Id" CanEdit="_canEdit" />
    </div>

    <ConfirmDeleteModal IsVisible="_isDeletePEGroupModalVisible" OnClose="CloseDeletePEGroupModal" IdToDelete="_idToDelete" OnDeleteById="DeletePEGroup" />
    <ConfirmDeleteModal IsVisible="_isDeleteDiseaseModalVisible" OnClose="CloseDeleteDiseaseModal" IdToDelete="_idToDelete" OnDeleteById="DeleteChronicDisease" />

    <AlertBottom IsVisible="_isServerErrorAlertVisible" OnClose="CloseServerErrorAlert">@_errorMessage</AlertBottom>
}

@code {
    [Parameter]
    public int PageId { get; set; }

    [Parameter]
    public int JournalId { get; set; }

    private PersonalizedAccountingCardResponse? _pageData;

    private List<ChronicDiseaseResponse>? _studentChronicDiseases;
    private List<PEGroupResponse>? _studentPEGroups;

    private List<StudentResponse>? _students;
    private List<ChronicDiseaseResponse>? _chronicDiseases;
    private List<PEGroupResponse>? _peGroups;

    private List<int>? _studentIdsThatHaveCards;

    private List<StudentResponse> Students => _students.Where(s => !_studentIdsThatHaveCards.Contains(s.Id) || s.Id == _pageData.StudentId).ToList();

    private bool _isDeletePEGroupModalVisible = false;
    private bool _isDeleteDiseaseModalVisible = false;

    private bool _isAddPEGroupModalVisible = false;
    private bool _isAddDiseaseModalVisible = false;

    [SupplyParameterFromForm]
    public AddStudentChronicDiseaseRequest ChronicDiseaseToAdd { get; set; } = new(-1, null);
    [SupplyParameterFromForm]
    public CreateChronicDiseaseRequest CreateDiseaseRequest { get; set; } = new("");

    [SupplyParameterFromForm]
    public AddStudentPEGroupRequest PEGroupToAdd { get; set; } = new(-1, null);
    [SupplyParameterFromForm]
    public CreatePEGroupRequest CreatePEGroupRequest { get; set; } = new("");

    private bool _canEdit => !JournalState.IsCurrentPageApproved && AppState.CanEditJournal;

    protected override async Task OnInitializedAsync()
    {
        JournalState.OnToggleIsApproved += StateHasChanged;
    }

    protected override async Task OnParametersSetAsync()
    {
        await JournalState.Initialize(JournalId, PageId);

        _pageData = await HttpClient.GetFromJsonAsync<PersonalizedAccountingCardResponse>("api/journal/personalizedaccountingcard/" + PageId.ToString());

        await FetchStudentPEGroupsAndChronicDiseases();

        _students = await HttpClient.GetFromJsonAsync<List<StudentResponse>>("api/student/getbyjournal/" + JournalId.ToString());

        await FetchStudentsWithCards();

        var groupResponse = await HttpClient.GetFromJsonAsync<GroupResponse>("api/group/getbyjournal/" + JournalId);
        if (groupResponse != null) _groupId = groupResponse.Id;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await Task.Delay(10);
        await JSRuntime.InvokeVoidAsync("resizeTextAreas");
    }

    private async Task FetchStudentsWithCards()
    {
        _studentIdsThatHaveCards = await HttpClient.GetFromJsonAsync<List<int>>("api/journal/personalizedaccountingcard/getstudentswithcards/" + JournalId);
    }

    private async Task FetchStudentPEGroupsAndChronicDiseases()
    {
        if (_pageData != null && _pageData.StudentId != null)
        {
            _studentChronicDiseases = await HttpClient.GetFromJsonAsync<List<ChronicDiseaseResponse>>("api/student/chronicdisease/" + _pageData.StudentId);
            _studentPEGroups = await HttpClient.GetFromJsonAsync<List<PEGroupResponse>>("api/student/pegroup/" + _pageData.StudentId);

            _chronicDiseases = await HttpClient.GetFromJsonAsync<List<ChronicDiseaseResponse>>("api/chronicdisease");
            _peGroups = await HttpClient.GetFromJsonAsync<List<PEGroupResponse>>("api/pegroup");

            ChronicDiseaseToAdd.StudentId = (int)_pageData.StudentId;
            PEGroupToAdd.StudentId = (int)_pageData.StudentId;
        }
        else
        {
            _studentChronicDiseases = null;
            _studentPEGroups = null;
        }
    }

    private async Task Update()
    {
        var request = _pageData!.ToRequest();
        var response = await HttpClient.PutAsJsonAsync<UpdatePersonalizedAccountingCardRequest>
            ("api/journal/personalizedaccountingcard/" + _pageData!.Id, request);

        if (!response.IsSuccessStatusCode)
        {
            var errorMessage = (await response.Content.ReadAsStringAsync()).Split('\n').FirstOrDefault();
            ShowServerErrorAlert(errorMessage);
        }
        else
        {
            var card = await response.Content.ReadFromJsonAsync<PersonalizedAccountingCardResponse>();
            JournalState.UpdatePageStudent(PageId, _students!.FirstOrDefault(s => s.Id == card!.StudentId));

            await FetchStudentsWithCards();
            await FetchStudentPEGroupsAndChronicDiseases();
        }
    }

    private async Task DeleteChronicDisease(int id)
    {
        if (_pageData == null || _pageData.StudentId == null) return;

        var response = await HttpClient.DeleteAsync($"api/student/chronicdisease?StudentId={_pageData.StudentId}&DiseaseId={id}");

        if (response.IsSuccessStatusCode) _studentChronicDiseases!.RemoveAll(d => d.Id == id);
        else
        {
            var errorMessage = (await response.Content.ReadAsStringAsync()).Split('\n').FirstOrDefault();
            ShowServerErrorAlert(errorMessage);
        }
    }

    private async Task DeletePEGroup(int id)
    {
        if (_pageData == null || _pageData.StudentId == null) return;

        var response = await HttpClient.DeleteAsync($"api/student/pegroup?StudentId={_pageData.StudentId}&PEGroupId={id}");

        if (response.IsSuccessStatusCode) _studentPEGroups!.RemoveAll(d => d.Id == id);
        else
        {
            var errorMessage = (await response.Content.ReadAsStringAsync()).Split('\n').FirstOrDefault();
            ShowServerErrorAlert(errorMessage);
        }
    }

    private void AddDisease(ChronicDiseaseResponse disease)
    {
        if (_chronicDiseases == null) return;
        _chronicDiseases.Add(disease);
    }

    private void AddDiseaseToPage(ChronicDiseaseResponse disease)
    {
        if (_studentChronicDiseases == null) return;
        _studentChronicDiseases.Add(disease);
    }

    private void AddPEGroup(PEGroupResponse peGroup)
    {
        if (_peGroups == null) return;
        _peGroups.Add(peGroup);
    }

    private void AddPEGroupToPage(PEGroupResponse peGroup)
    {
        if (_studentPEGroups == null) return;
        _studentPEGroups.Add(peGroup);
    }

    private void OpenDeletePEGroupModal(int id)
    {
        _idToDelete = id;
        _isDeletePEGroupModalVisible = true;
    }

    private void OpenDeleteDiseaseModal(int id)
    {
        _idToDelete = id;
        _isDeleteDiseaseModalVisible = true;
    }

    private void CloseDeletePEGroupModal()
    {
        _isDeletePEGroupModalVisible = false;
        _idToDelete = null;
    }

    private void CloseDeleteDiseaseModal()
    {
        _isDeleteDiseaseModalVisible = false;
        _idToDelete = null;
    }

    private void OpenAddPEGroupModal()
    {
        PEGroupToAdd.PEGroupId = null;
        CreatePEGroupRequest.Name = "";
        _isAddPEGroupModalVisible = true;
    }

    private void OpenAddDiseaseModal()
    {
        ChronicDiseaseToAdd.ChronicDiseaseId = null;
        CreateDiseaseRequest.Name = "";
        _isAddDiseaseModalVisible = true;
    }

    private void CloseAddPEGroupModal()
    {
        _isAddPEGroupModalVisible = false;
        ChronicDiseaseToAdd.ChronicDiseaseId = null;
        CreatePEGroupRequest.Name = "";
    }

    private void CloseAddDiseaseModal()
    {
        _isAddDiseaseModalVisible = false;
        PEGroupToAdd.PEGroupId = null;
        CreateDiseaseRequest.Name = "";
    }
}
@page "/journal/{journalId:int}/EducationalProcessSchedule/{pageId:int}"
@rendermode InteractiveServer

@using Contracts.Journal.EducationalProcessSchedule
@using Contracts.Mappers
@using Contracts.Mappers.Journal
@using Frontend.Services

@inject HttpClient HttpClient
@inject JournalState JournalState

<PageTitle>График учебного процесса</PageTitle>

<h3 class="d-flex justify-content-center">ГРАФИК УЧЕБНОГО ПРОЦЕССА</h3>

@if (_pageData == null)
{
    <p><em>Загрузка...</em></p>
}
else
{
    <table class="table table-bordered">
        <thead>
            <tr>
                <th class="text-center">Семестр</th>
                <th class="text-center">Начало</th>
                <th class="text-center">Окончание</th>
                <th class="text-center">Сессия</th>
                <th class="text-center">Практика</th>
                <th class="text-center">Каникулы</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var record in _pageData.EducationalProcessSchedule)
            {
                <tr>
                    <td>
                        <input type="number" min="0" @bind="record.SemesterNumber" @bind:after="async () => await Update(record)" class="input fullwidth" />
                    </td>
                    <td>
                        <input type="date" @bind="record.StartDate" @bind:after="async () => await Update(record)" class="input" />
                    </td>
                    <td>
                        <input type="date" @bind="record.EndDate" @bind:after="async () => await Update(record)" class="input" />
                    </td>
                    <td>
                        с <input type="date" @bind="record.SessionStartDate" @bind:after="async () => await Update(record)" class="input" />
                        <br />
                        по <input type="date" @bind="record.SessionEndDate" @bind:after="async () => await Update(record)" class="input" />
                    </td>
                    <td>
                        <div>
                            с <input type="date" @bind="record.PracticeStartDate" @bind:after="async () => await Update(record)" class="input" />
                            <br />
                            по <input type="date" @bind="record.PracticeEndDate" @bind:after="async () => await Update(record)" class="input" />
                        </div>
                    </td>
                    <td>
                        с <input type="date" @bind="record.VacationStartDate" @bind:after="async () => await Update(record)" class="input" />
                        <br />
                        по <input type="date" @bind="record.VacationEndDate" @bind:after="async () => await Update(record)" class="input" />
                    </td>
                    <td>
                        <button @onclick="async () => await Delete(record)" class="btn btn-close" />
                    </td>
                </tr>
            }
        </tbody>
        
    </table>
    <button @onclick="Add" class="btn btn-outline-primary">Добавить строку</button>
}

@code {
    [Parameter]
    public int PageId { get; set; }

    [Parameter]
    public int JournalId { get; set; }

    public EducationalProcessSchedulePageResponse? _pageData;

    protected override async Task OnInitializedAsync()
    {
        JournalState.Initialize(JournalId, PageId);

        _pageData = await HttpClient.GetFromJsonAsync<EducationalProcessSchedulePageResponse>("api/journal/educationalprocessschedule/" + PageId.ToString());
    }

    private async Task Add()
    {
        Console.WriteLine("Add educational process schedule");

        var request = new CreateEducationalProcessScheduleRecordRequest(null, null, null, null, null, null, null, null, null, PageId);
        var response = await HttpClient.PostAsJsonAsync<CreateEducationalProcessScheduleRecordRequest>("api/journal/educationalprocessschedule", request);

        if (response.IsSuccessStatusCode)
        {
            var addedRecord = await response.Content.ReadFromJsonAsync<EducationalProcessScheduleRecordResponse>();
            _pageData!.EducationalProcessSchedule.Add(addedRecord!);
        }
    }

    private async Task Update(EducationalProcessScheduleRecordResponse record)
    {
        Console.WriteLine("Update educational process schedule");

        var request = record.ToRequest();
        var response = await HttpClient.PutAsJsonAsync<UpdateEducationalProcessScheduleRecordRequest>
            ("api/journal/educationalprocessschedule/" + record.Id, request);

        if (!response.IsSuccessStatusCode)
        {
            // var updatedRecord = await response.Content.ReadFromJsonAsync<EducationalProcessScheduleRecordResponse>();
            // record = updatedRecord!;
        }
    }

    private async Task Delete(EducationalProcessScheduleRecordResponse record)
    {
        Console.WriteLine("Delete educational process schedule");

        var response = await HttpClient.DeleteAsync("api/journal/educationalprocessschedule/" + record.Id);

        if (response.IsSuccessStatusCode) _pageData!.EducationalProcessSchedule.Remove(record);
    }
}

<style>
    .input {
        border: none;
        outline: none;
    }

    .fullwidth {
        width: 100%;
    }
</style>
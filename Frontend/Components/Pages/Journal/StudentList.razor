@page "/journal/{journalId:int}/StudentList/{pageId:int}"

@inherits TablePageBase

@attribute [Authorize]

@using Contracts.Groups
@using Contracts.Journal
@using Contracts.Journal.PersonalizedAccountingCards
@using Contracts.Journal.StudentList
@using Contracts.Mappers.Journal
@using Contracts.Students
@using Frontend.Components.Buttons
@using Frontend.Components.Utils
@using Frontend.Services

@inject HttpClient HttpClient
@inject JournalState JournalState

<PageTitle>Список студентов</PageTitle>

<h3 class="d-flex justify-content-center">СПИСОК СТУДЕНТОВ</h3>

@if (_pageData == null || _students == null || _cardIds == null)
{
    <p><em>Загрузка...</em></p>
}
else
{
    <ReloadButton @onclick="SynchronizeStudents" AdditionalClasses="mb-3">Синхронизировать студентов</ReloadButton>

    <table class="table table-bordered">
        <thead>
            <tr>
                <th class="col-1 text-center align-middle">№</th>
                <th class="col-7 text-center align-middle">
                    Фамилия, имя отчество (полностью)
                    <ReferenceButton Uri="@GetStudentsRefPageUri()" ButtonSize="ButtonSizes.Small" />
                </th>
                <th class="col-2 text-center align-middle">
                    Контактный<br/>
                    телефон
                </th>
                <th class="col-2 text-center align-middle">
                    № страницы<br/>
                    персонифицированного<br/>
                    учета
                </th>
                <th>
                    <ReloadButton @onclick="ReloadAllRecordsCardReferences" />
                </th>
            </tr>
        </thead>
        <tbody>
            @foreach (var record in _pageData.StudentList)
            {
                <tr class="@GetRowClass(record.Id)">
                    <td>
                        <input type="number" min="1" onkeypress="return (event.charCode !=8 && event.charCode ==0 || (event.charCode >= 48 && event.charCode <= 57))"
                        @bind="record.Number" @bind:after='async () => await Update(record)' class="input fullwidth" />
                    </td>
                    <td>
                        <select @bind="record.StudentId" @bind:after="async () => await Update(record)" class="input fullwidth">
                            <option value="">(нет)</option>
                            @foreach (var student in _students)
                            {
                                @if (record.StudentId == student.Id || !_pageData.StudentList.Any(a => a.StudentId == student.Id))
                                {
                                    <option @key="student.Id" value="@student.Id">@student.LastName @student.FirstName @student.MiddleName</option>
                                }
                            }
                        </select>
                    </td>
                    <td>
                        <p>
                            @if (record.StudentId != null)
                            {
                                var phoneNumber = _students.FirstOrDefault(s => s.Id == record.StudentId)!.PhoneNumber;
                                @if (phoneNumber != null)
                                {
                                    @(phoneNumber)
                                }
                            }
                        </p>
                    </td>
                    <td>
                        <p>
                            @if (record.PersonalizedAccountingCardId == null) { @("-") }
                            else { @(record.PersonalizedAccountingCardId.ToString()) }
                        </p>
                        @* <select @bind="record.PersonalizedAccountingCardId" @bind:after="async () => await Update(record)" class="input fullwidth">
                            <option value="">(нет)</option>
                            @foreach (var card in _cardIds)
                            {
                                @if (record.PersonalizedAccountingCardId == card.Id || !_pageData.StudentList.Any(a => a.PersonalizedAccountingCardId == card.Id))
                                {
                                    <option @key="card.Id" value="@card.Id">@card.Id</option>
                                }
                            }
                        </select> *@
                    </td>
                    <td>
                        <DeleteButton @onclick="() => OpenDeleteModal(record.Id)" />
                    </td>
                </tr>
            }
        </tbody>
    </table>
    <AddButton @onclick="Add">Добавить строку</AddButton>

    <ConfirmDeleteModal IsVisible="_isDeleteModalVisible" OnClose="CloseDeleteModal" IdToDelete="_idToDelete" OnDeleteById="Delete" />

    <AlertBottom IsVisible="_isServerErrorAlertVisible" OnClose="CloseServerErrorAlert">@_errorMessage</AlertBottom>
}

@code {
    [Parameter]
    public int PageId { get; set; }

    [Parameter]
    public int JournalId { get; set; }

    private StudentListPageResponse? _pageData;

    private List<StudentResponse>? _students;

    private List<PersonalizedAccountingCardIdResponse>? _cardIds;

    protected override async Task OnInitializedAsync()
    {
        await JournalState.Initialize(JournalId, PageId);

        _pageData = await HttpClient.GetFromJsonAsync<StudentListPageResponse>("api/journal/studentlist/" + PageId.ToString());
        _students = await HttpClient.GetFromJsonAsync<List<StudentResponse>>("api/student/getbyjournal/" + JournalId.ToString());
        _cardIds = await HttpClient.GetFromJsonAsync<List<PersonalizedAccountingCardIdResponse>>
            ("api/journal/personalizedaccountingcard/getidsbyjournal/" + JournalId.ToString());

        var groupResponse = await HttpClient.GetFromJsonAsync<GroupResponse>("api/group/getbyjournal/" + JournalId);
        if (groupResponse != null) _groupId = groupResponse.Id;
    }

    private async Task SynchronizeStudents()
    {
        if (_pageData == null || _students == null) return;

        var studentsWithoutRecords = _students.Where(s => !_pageData.StudentList.Any(r => r.StudentId == s.Id));
        foreach (var s in studentsWithoutRecords)
        {
            var record = await Add();
            if (record != null)
            {
                record.StudentId = s.Id;
                await Update(record);
            }
        }
    }

    private async Task ReloadAllRecordsCardReferences()
    {
        if (_pageData == null) return;
        foreach (var record in _pageData.StudentList)
        {
            await ReloadRecordCardReference(record.Id);
        }
    }

    private async Task ReloadRecordCardReference(int recordId)
    {
        if (_pageData == null) return;

        var record = _pageData.StudentList.FirstOrDefault(r => r.Id == recordId);
        if (record == null) return;

        if (record.StudentId == null)
        {
            record.PersonalizedAccountingCardId = null;
            await Update(record);
            return;
        }

        var response = await HttpClient.GetAsync("api/journal/personalizedaccountingcard/getbystudent/" + record.StudentId);
        if (response.IsSuccessStatusCode)
        {
            var id = await response.Content.ReadFromJsonAsync<int>();
            record.PersonalizedAccountingCardId = id;

            await Update(record);
        }
        else
        {
            record.PersonalizedAccountingCardId = null;
            await Update(record);
        }
    }

    private async Task Update(StudentListRecordResponse record)
    {
        _rowsWithErrors.Remove(record.Id);
        CloseServerErrorAlert();

        if (record.StudentId == null) record.PersonalizedAccountingCardId = null;
        if (record.StudentId != null && record.PersonalizedAccountingCardId == null)
        {
            var cardIdResponse = await HttpClient.GetAsync("api/journal/personalizedaccountingcard/getbystudent/" + record.StudentId);
            if (cardIdResponse.IsSuccessStatusCode) record.PersonalizedAccountingCardId = await cardIdResponse.Content.ReadFromJsonAsync<int>();
        }

        var request = record.ToRequest();
        var response = await HttpClient.PutAsJsonAsync<UpdateStudentListRecordRequest>("api/journal/studentlist/" + record.Id, request);

        if (response.IsSuccessStatusCode)
        {

        }
        else
        {
            _rowsWithErrors.Add(record.Id);
            var errorMessage = (await response.Content.ReadAsStringAsync()).Split('\n').FirstOrDefault();
            ShowServerErrorAlert(errorMessage);
        }
    }

    private async Task<StudentListRecordResponse?> Add()
    {
        var request = new CreateStudentListRecordRequest(null, null, null, PageId);
        var response = await HttpClient.PostAsJsonAsync<CreateStudentListRecordRequest>("api/journal/studentlist", request);

        if (response.IsSuccessStatusCode)
        {
            var addedRecord = await response.Content.ReadFromJsonAsync<StudentListRecordResponse>();
            _pageData!.StudentList.Add(addedRecord!);
            return addedRecord;
        }
        else
        {
            var errorMessage = (await response.Content.ReadAsStringAsync()).Split('\n').FirstOrDefault();
            ShowServerErrorAlert(errorMessage);
            return null;
        }
    }

    private async Task Delete(int recordId)
    {
        var response = await HttpClient.DeleteAsync("api/journal/studentlist/" + recordId);

        if (response.IsSuccessStatusCode) _pageData!.StudentList.RemoveAll(r => r.Id == recordId);
        else
        {
            var errorMessage = (await response.Content.ReadAsStringAsync()).Split('\n').FirstOrDefault();
            ShowServerErrorAlert(errorMessage);
        }
    }
}
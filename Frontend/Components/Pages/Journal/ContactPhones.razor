@page "/journal/{journalId:int}/ContactPhones/{pageId:int}"

@inherits TablePageBase

@attribute [Authorize]

@using Frontend.Components.Buttons
@using Frontend.Components.Utils
@using Frontend.Services
@using Contracts.Journal.ContactPhones

@inject HttpClient HttpClient
@inject JournalState JournalState
@inject IJSRuntime JSRuntime
@inject AppState AppState

<PageTitle>Контактные Телефоны</PageTitle>

<h3 class="d-flex justify-content-center"><b>КОНТАКТНЫЕ ТЕЛЕФОНЫ</b></h3>

@if (_pageData == null)
{
    <p><em>Загрузка...</em></p>
}
else
{
    <table class="table table-bordered">
        <tbody>
            @foreach (var phone in _pageData.PhoneNumbers)
            {
                <tr class="@GetRowClass(phone.Id)">
                    <td class="align-middle col-6">
                        @if (!_canEdit)
                        {
                            <p>@phone.Name</p>
                        }
                        else
                        {
                            <textarea rows="1" style="overflow:hidden; resize:none;" oninput="this.style.height = 'auto'; this.style.height = (this.scrollHeight) + 'px';"
                            @bind="phone.Name" @bind:after='async () => await Update(phone)' class="input fullwidth" />
                        }
                    </td>
                    <td class="align-top col-6">
                        @if (!_canEdit)
                        {
                            <p>@phone.PhoneNumber</p>
                        }
                        else
                        {
                            <input type="tel" maxlength="19" @bind="phone.PhoneNumber" @bind:after='async () => await Update(phone)' class="input fullwidth" />
                        }
                    </td>
                    @if (_canEdit)
                    {
                        <td>
                            <DeleteButton @onclick="() => OpenDeleteModal(phone.Id)"></DeleteButton>
                        </td>
                    }
                </tr>
            }
        </tbody>
    </table>

    @if (_canEdit)
    {
        <AddButton @onclick="Add">Добавить строку</AddButton>
    }

    <ConfirmDeleteModal IsVisible="_isDeleteModalVisible" OnClose="CloseDeleteModal" IdToDelete="_idToDelete" OnDeleteById="Delete" />

    <AlertBottom IsVisible="_isServerErrorAlertVisible" OnClose="CloseServerErrorAlert">@_errorMessage</AlertBottom>
}

@code {
    [Parameter]
    public int PageId { get; set; }

    [Parameter]
    public int JournalId { get; set; }

    private ContactPhonesPageResponse? _pageData;

    private bool _canEdit => !JournalState.IsCurrentPageApproved && AppState.CanEditJournal;

    protected override async Task OnInitializedAsync()
    {
        JournalState.OnToggleIsApproved += StateHasChanged;

        await JournalState.Initialize(JournalId, PageId);

        _pageData = await HttpClient.GetFromJsonAsync<ContactPhonesPageResponse>("api/journal/contactphone/" + PageId.ToString());
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await Task.Delay(10);
        await JSRuntime.InvokeVoidAsync("resizeTextAreas");
    }

    private async Task Update(ContactPhoneResponse phone)
    {
        _rowsWithErrors.Remove(phone.Id);
        CloseServerErrorAlert();

        var request = new UpdateContactPhoneRequest(phone.Name, phone.PhoneNumber == "" ? null : phone.PhoneNumber);
        var response = await HttpClient.PutAsJsonAsync<UpdateContactPhoneRequest>("api/journal/contactphone/" + phone.Id, request);

        if (!response.IsSuccessStatusCode)
        {
            _rowsWithErrors.Add(phone.Id);
            var errorMessage = (await response.Content.ReadAsStringAsync()).Split('\n').FirstOrDefault();
            ShowServerErrorAlert(errorMessage);
        }
    }

    private async Task Add()
    {
        var request = new CreateContactPhoneRequest(null, null, PageId);
        var response = await HttpClient.PostAsJsonAsync<CreateContactPhoneRequest>("api/journal/contactphone", request);

        if (response.IsSuccessStatusCode)
        {
            var addedPhone = await response.Content.ReadFromJsonAsync<ContactPhoneResponse>();
            _pageData!.PhoneNumbers.Add(addedPhone!);
        }
        else
        {
            var errorMessage = (await response.Content.ReadAsStringAsync()).Split('\n').FirstOrDefault();
            ShowServerErrorAlert(errorMessage);
        }
    }

    private async Task Delete(int phoneId)
    {
        var response = await HttpClient.DeleteAsync("api/journal/contactphone/" + phoneId);

        if (response.IsSuccessStatusCode) _pageData!.PhoneNumbers.RemoveAll(p => p.Id == phoneId);
        else
        {
            var errorMessage = (await response.Content.ReadAsStringAsync()).Split('\n').FirstOrDefault();
            ShowServerErrorAlert(errorMessage);
        }
    }
}
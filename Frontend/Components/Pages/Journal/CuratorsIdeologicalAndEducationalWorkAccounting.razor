@page "/journal/{journalId:int}/CuratorsIdeologicalAndEducationalWorkAccounting/{pageId:int}"

@using Contracts.Journal.CuratorsIdeologicalAndEducationalWorkAccounting
@using Contracts.Mappers
@using Contracts.Mappers.Journal
@using Frontend.Services
@using Frontend.Utils

@inject HttpClient HttpClient
@inject JournalState JournalState

<PageTitle>Учет идеологической и воспитательной работы куратора учебной группы</PageTitle>

<h3 class="d-flex justify-content-center">УЧЕТ ИДЕОЛОГИЧЕСКОЙ И ВОСПИТАТЕЛЬНОЙ РАБОТЫ КУРАТОРА УЧЕБНОЙ ГРУППЫ</h3>

@if (_pageData == null)
{
    <p><em>Загрузка...</em></p>
}
else
{
    <h3 class="d-flex justify-content-center">
        в 
        <select @bind="_pageData.Attributes.Month" @bind:after="UpdateAttributes" class="input underline">
            <option value="">(нет)</option>
            @foreach (var item in MonthsUtils.InMonthsNames)
            {
                <option @key="item.Key" value="@item.Key">@MonthsUtils.InMonthsNames[item.Key]</option>
            }
        </select> 
        <input type="number" min="0" @bind="_pageData.Attributes.Year" @bind:after="UpdateAttributes" class="input underline" />
    </h3>
    <table class="table table-bordered">
        <thead>
            <tr>
                <th class="text-center">Срок выполнения</th>
                <th class="text-center">Содержание работы</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var record in _pageData.IdeologicalEducationalWork)
            {
                <tr>
                    <td>
                        с <input type="date" @bind="record.StartDate" @bind:after="async () => await Update(record)" class="input" />
                        <br />
                        по <input type="date" @bind="record.EndDate" @bind:after="async () => await Update(record)" class="input" />
                    </td>
                    <td>
                        <input @bind="record.WorkContent" @bind:after="async () => await Update(record)" class="input fullwidth" />
                    </td>
                    <td>
                        <button @onclick="async () => await Delete(record)" class="btn btn-close" />
                    </td>
                </tr>
            }
            
        </tbody>
    </table>
    <button @onclick="Add" class="btn btn-outline-primary">Добавить строку</button>
}

@code {
    [Parameter]
    public int PageId { get; set; }

    [Parameter]
    public int JournalId { get; set; }

    private IdeologicalEducationalWorkPageResponse? _pageData;

    protected override async Task OnInitializedAsync()
    {
        await JournalState.Initialize(JournalId, PageId);

        _pageData = await HttpClient.GetFromJsonAsync<IdeologicalEducationalWorkPageResponse>("api/journal/ideologicalandeducationalwork/" + PageId.ToString());
    }

    private async Task Update(IdeologicalEducationalWorkRecordResponse record)
    {
        Console.WriteLine("Update ideological and educational work");

        var request = record.ToRequest();
        var response = await HttpClient.PutAsJsonAsync<UpdateIdeologicalEducationalWorkRecordRequest>
            ("api/journal/ideologicalandeducationalwork/" + record.Id, request);

        if (response.IsSuccessStatusCode)
        {
            //TODO
        }
    }

    private async Task Delete(IdeologicalEducationalWorkRecordResponse record)
    {
        Console.WriteLine("Delete ideological and educational work");

        var response = await HttpClient.DeleteAsync("api/journal/ideologicalandeducationalwork/" + record.Id);

        if (response.IsSuccessStatusCode) _pageData!.IdeologicalEducationalWork.Remove(record);
    }

    private async Task Add()
    {
        Console.WriteLine("Add ideological and educational work");

        var request = new CreateIdeologicalEducationalWorkRecordRequest(null, null, null, PageId);
        var response = await HttpClient.PostAsJsonAsync<CreateIdeologicalEducationalWorkRecordRequest>("api/journal/ideologicalandeducationalwork", request);

        if (response.IsSuccessStatusCode)
        {
            var addedRecord = await response.Content.ReadFromJsonAsync<IdeologicalEducationalWorkRecordResponse>();
            _pageData!.IdeologicalEducationalWork.Add(addedRecord!);
        }
    }

    private async Task UpdateAttributes()
    {
        var request = new UpdateIdeologicalAndEducationalWorkAttributesRequest(_pageData!.Attributes.Month, _pageData!.Attributes.Year);
        var response = await HttpClient.PutAsJsonAsync<UpdateIdeologicalAndEducationalWorkAttributesRequest>
            ("api/journal/ideologicalandeducationalwork/updateattributes/" + _pageData!.Attributes.Id, request);

        if (!response.IsSuccessStatusCode)
        {
            //TODO
        }
    }
}
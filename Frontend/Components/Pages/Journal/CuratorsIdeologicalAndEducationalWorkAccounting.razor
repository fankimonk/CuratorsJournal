@page "/journal/{journalId:int}/CuratorsIdeologicalAndEducationalWorkAccounting/{pageId:int}"

@inherits TablePageBase

@attribute [Authorize]

@using Contracts.Journal.CuratorsIdeologicalAndEducationalWorkAccounting
@using Contracts.Mappers
@using Contracts.Mappers.Journal
@using Frontend.Components.Buttons
@using Frontend.Components.Utils
@using Frontend.Services
@using Frontend.Utils

@inject HttpClient HttpClient
@inject JournalState JournalState
@inject IJSRuntime JSRuntime

<PageTitle>Учет идеологической и воспитательной работы куратора учебной группы</PageTitle>

<h3 class="d-flex justify-content-center">УЧЕТ ИДЕОЛОГИЧЕСКОЙ И ВОСПИТАТЕЛЬНОЙ РАБОТЫ КУРАТОРА УЧЕБНОЙ ГРУППЫ</h3>

@if (_pageData == null)
{
    <p><em>Загрузка...</em></p>
}
else
{
    <h3 class="d-flex justify-content-center">
        в 
        <select @bind="_pageData.Attributes.Month" @bind:after="UpdateAttributes" class="input underline text-center me-2 ms-2">
            <option value="">(нет)</option>
            @foreach (var item in MonthsUtils.InMonthsNames)
            {
                <option @key="item.Key" value="@item.Key">@MonthsUtils.InMonthsNames[item.Key]</option>
            }
        </select>
        20
        <input type="number" min="0" max="98" onkeypress="return (event.charCode !=8 && event.charCode ==0 || (event.charCode >= 48 && event.charCode <= 57))"
        @bind="_pageData.Attributes.Year" @bind:after="UpdateAttributes" class="input underline text-center" />
        г.
    </h3>
    <table class="table table-bordered">
        <thead>
            <tr>
                <th class="col-2 text-center">Срок выполнения</th>
                <th class="col-10 text-center">Содержание работы</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var record in _pageData.IdeologicalEducationalWork)
            {
                <tr class="@GetRowClass(record.Id)">
                    <td>
                        с <input type="date" @bind="record.StartDate" @bind:after="async () => await Update(record)" class="input" />
                        <br />
                        по <input type="date" @bind="record.EndDate" @bind:after="async () => await Update(record)" class="input" />
                    </td>
                    <td>
                        <textarea rows="1" style="overflow:hidden; resize:none;" oninput="this.style.height = 'auto'; this.style.height = (this.scrollHeight) + 'px';"
                            @bind="record.WorkContent" @bind:after="async () => await Update(record)" class="input fullwidth" />
                    </td>
                    <td>
                        <DeleteButton @onclick="() => OpenDeleteModal(record.Id)" />
                    </td>
                </tr>
            }

        </tbody>
    </table>
    <AddButton @onclick="Add">Добавить строку</AddButton>

    <ConfirmDeleteModal IsVisible="_isDeleteModalVisible" OnClose="CloseDeleteModal" IdToDelete="_idToDelete" OnDeleteById="Delete" />

    <AlertBottom IsVisible="_isServerErrorAlertVisible" OnClose="CloseServerErrorAlert">@_errorMessage</AlertBottom>
}

@code {
    [Parameter]
    public int PageId { get; set; }

    [Parameter]
    public int JournalId { get; set; }

    private IdeologicalEducationalWorkPageResponse? _pageData;

    protected override async Task OnParametersSetAsync()
    {
        await JournalState.Initialize(JournalId, PageId);

        _pageData = await HttpClient.GetFromJsonAsync<IdeologicalEducationalWorkPageResponse>("api/journal/ideologicalandeducationalwork/" + PageId.ToString());
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await Task.Delay(10);
        await JSRuntime.InvokeVoidAsync("resizeTextAreas");
    }

    private async Task Update(IdeologicalEducationalWorkRecordResponse record)
    {
        _rowsWithErrors.Remove(record.Id);
        CloseServerErrorAlert();

        if (record.StartDate > record.EndDate)
        {
            _rowsWithErrors.Add(record.Id);
            ShowServerErrorAlert("Дата начала не может быть позже даты окончания");
            return;
        }

        var request = record.ToRequest();
        var response = await HttpClient.PutAsJsonAsync<UpdateIdeologicalEducationalWorkRecordRequest>
            ("api/journal/ideologicalandeducationalwork/" + record.Id, request);

        if (!response.IsSuccessStatusCode)
        {
            _rowsWithErrors.Add(record.Id);
            var errorMessage = (await response.Content.ReadAsStringAsync()).Split('\n').FirstOrDefault();
            ShowServerErrorAlert(errorMessage);
        }
    }

    private async Task Delete(int recordId)
    {
        var response = await HttpClient.DeleteAsync("api/journal/ideologicalandeducationalwork/" + recordId);

        if (response.IsSuccessStatusCode) _pageData!.IdeologicalEducationalWork.RemoveAll(r => r.Id == recordId);
        else
        {
            var errorMessage = (await response.Content.ReadAsStringAsync()).Split('\n').FirstOrDefault();
            ShowServerErrorAlert(errorMessage);
        }
    }

    private async Task Add()
    {
        var request = new CreateIdeologicalEducationalWorkRecordRequest(null, null, null, PageId);
        var response = await HttpClient.PostAsJsonAsync<CreateIdeologicalEducationalWorkRecordRequest>("api/journal/ideologicalandeducationalwork", request);

        if (response.IsSuccessStatusCode)
        {
            var addedRecord = await response.Content.ReadFromJsonAsync<IdeologicalEducationalWorkRecordResponse>();
            _pageData!.IdeologicalEducationalWork.Add(addedRecord!);
        }
        else
        {
            var errorMessage = (await response.Content.ReadAsStringAsync()).Split('\n').FirstOrDefault();
            ShowServerErrorAlert(errorMessage);
        }
    }

    private async Task UpdateAttributes()
    {
        var request = new UpdateIdeologicalAndEducationalWorkAttributesRequest(_pageData!.Attributes.Month, _pageData!.Attributes.Year);
        var response = await HttpClient.PutAsJsonAsync<UpdateIdeologicalAndEducationalWorkAttributesRequest>
            ("api/journal/ideologicalandeducationalwork/updateattributes/" + _pageData!.Attributes.Id, request);

        if (!response.IsSuccessStatusCode)
        {
            var errorMessage = (await response.Content.ReadAsStringAsync()).Split('\n').FirstOrDefault();
            ShowServerErrorAlert(errorMessage);
        }
    }
}
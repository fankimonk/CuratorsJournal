@page "/journal/{journalId:int}/studentshealthcard/{pageId:int}"
@rendermode InteractiveServer

@using Contracts.AcademicYears
@using Contracts.Groups
@using Contracts.Journal.StudentHealthCards
@using Contracts.Mappers
@using Contracts.Mappers.Journal
@using Contracts.Students

@inject HttpClient HttpClient

<PageTitle>Карта здоровья студентов</PageTitle>

<h3 class="d-flex justify-content-center">
    КАРТА ЗДОРОВЬЯ СТУДЕНТОВ 
    @if (_academicYears != null)
    {
        @(" В ")
        <select @bind="_pageData!.Attributes.AcademicYearId" @bind:after="UpdateAttributes" class="input">
            <option value="">-- Выберите учебный год --</option>
            @foreach (var academicYear in _academicYears)
            {
                <option @key="academicYear.Id" value="@academicYear.Id">
                    @academicYear.StartYear / @academicYear.EndYear
                </option>
            }
        </select>
        @(" учебном году")
    }
</h3>

@if (_pageData == null || _students == null)
{
    <p><em>Загрузка...</em></p>
}
else
{
    <table class="table table-bordered">
        <thead>
            <tr>
                <th class="text-center">№</th>
                <th class="text-center">Фамилия, имя, отчество (полностью)</th>
                <th class="text-center">Пропущено учебных занятий<br />по болезни</th>
                <th class="text-center">Примечание</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var record in _pageData.StudentHealthCard)
            {
                <tr>
                    <td>
                        <input type="number" min="0" @bind="record.Number" @bind:after="async () => await Update(record)" class="input fullwidth" />
                    </td>
                    <td>
                        <select @bind="record.StudentId" @bind:after="async () => await Update(record)" class="input fullwidth">
                            <option value="">(нет)</option>
                            @foreach (var student in _students)
                            {
                                @if (record.StudentId == student.Id || !_pageData.StudentHealthCard.Any(a => a.StudentId == student.Id))
                                {
                                    <option @key="student.Id" value="@student.Id">@student.LastName @student.FirstName @student.MiddleName</option>
                                }
                            }
                        </select>
                    </td>
                    <td>
                        <input type="number" min="0" @bind="record.MissedClasses" @bind:after="async () => await Update(record)" class="input fullwidth" />
                    </td>
                    <td>
                        <input @bind="record.Note" @bind:after="async () => await Update(record)" class="input fullwidth" />
                    </td>
                    <td>
                        <button @onclick="async () => await Delete(record)" class="btn btn-close" />
                    </td>
                </tr>
            }
        </tbody>
    </table>
    <button @onclick="Add" class="btn btn-outline-primary">Добавить строку</button>
}

@code {
    [Parameter]
    public int PageId { get; set; }

    [Parameter]
    public int JournalId { get; set; }

    public HealthCardPageResponse? _pageData;

    private GroupResponse? _group;

    private List<AcademicYearResponse>? _academicYears;

    private List<StudentResponse>? _students;

    protected override async Task OnInitializedAsync()
    {
        _pageData = await HttpClient.GetFromJsonAsync<HealthCardPageResponse>("api/journal/healthcard/" + PageId.ToString());

        _group = await HttpClient.GetFromJsonAsync<GroupResponse>("api/group/getbyjournal/" + JournalId.ToString());

        var getAcademicYearsUri = "api/academicyear/getsinceyear/";
        if (_group != null)
            _academicYears = await HttpClient.GetFromJsonAsync<List<AcademicYearResponse>>(getAcademicYearsUri + _group.AdmissionYear.ToString());
        else
            _academicYears = await HttpClient.GetFromJsonAsync<List<AcademicYearResponse>>(getAcademicYearsUri);

        _students = await HttpClient.GetFromJsonAsync<List<StudentResponse>>("api/student/getbyjournal/" + JournalId.ToString());
    }

    private async Task Add()
    {
        Console.WriteLine("Add health card");

        var request = new CreateHealthCardRecordRequest(null, null, null, null, PageId);
        var response = await HttpClient.PostAsJsonAsync<CreateHealthCardRecordRequest>("api/journal/healthcard", request);

        if (response.IsSuccessStatusCode)
        {
            var addedRecord = await response.Content.ReadFromJsonAsync<HealthCardRecordResponse>();
            _pageData!.StudentHealthCard.Add(addedRecord!);
        }
    }

    private async Task Update(HealthCardRecordResponse record)
    {
        Console.WriteLine("Update health card");

        var request = record.ToRequest();
        var response = await HttpClient.PutAsJsonAsync<UpdateHealthCardRecordRequest>
            ("api/journal/healthcard/" + record.Id, request);

        if (!response.IsSuccessStatusCode)
        {
            // var updatedRecord = await response.Content.ReadFromJsonAsync<EducationalProcessScheduleRecordResponse>();
            // record = updatedRecord!;
        }
    }

    private async Task Delete(HealthCardRecordResponse record)
    {
        Console.WriteLine("Delete health card");

        var response = await HttpClient.DeleteAsync("api/journal/healthcard/" + record.Id);

        if (response.IsSuccessStatusCode) _pageData!.StudentHealthCard.Remove(record);
    }

    private async Task UpdateAttributes()
    {
        var request = new UpdateHealthCardPageAttributesRequest(_pageData!.Attributes.AcademicYearId);
        var response = await HttpClient.PutAsJsonAsync<UpdateHealthCardPageAttributesRequest>
            ("api/journal/healthcard/updateattributes/" + _pageData!.Attributes.Id, request);

        if (!response.IsSuccessStatusCode)
        {
            //TODO
        }
    }
}

<style>
    .input {
        border: none;
        outline: none;
        background: transparent;
    }

    .fullwidth {
        width: 100%;
    }
</style>
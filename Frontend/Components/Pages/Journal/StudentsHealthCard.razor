@page "/journal/{journalId:int}/StudentsHealthCard/{pageId:int}"

@inherits TablePageBase

@attribute [Authorize]

@using Contracts.AcademicYears
@using Contracts.Groups
@using Contracts.Journal.StudentHealthCards
@using Contracts.Mappers
@using Contracts.Mappers.Journal
@using Contracts.Students
@using Frontend.Components.Buttons
@using Frontend.Components.Utils
@using Frontend.Services
@using Frontend.Utils.Extensions

@inject HttpClient HttpClient
@inject JournalState JournalState
@inject IJSRuntime JSRuntime
@inject AppState AppState

<PageTitle>Карта здоровья студентов</PageTitle>

<h3 class="d-flex justify-content-center">
    КАРТА ЗДОРОВЬЯ СТУДЕНТОВ 
    @if (_academicYears != null)
    {
        @if (!_canEdit)
        {
            var academicYear = _academicYears.FirstOrDefault(a => a.Id == _pageData.Attributes.AcademicYearId);
            var academicYearStr = academicYear == null ? "(нет)" : academicYear.StartYear + " / " + academicYear.EndYear;
            <span> В @academicYearStr учебном году</span>
        }
        else
        {
            @(" В ")
            <select @bind="_pageData!.Attributes.AcademicYearId" @bind:after="UpdateAttributes" class="text-center input ms-2">
                <option value="">(нет)</option>
                @foreach (var academicYear in _academicYears)
                {
                    <option @key="academicYear.Id" value="@academicYear.Id">
                        @academicYear.StartYear / @academicYear.EndYear
                    </option>
                }
            </select>
            <ReferenceButton ButtonSize="ButtonSizes.Small" AdditionalClasses="me-2" Uri="/AcademicYears" />
            @(" учебном году")
        }
    }
</h3>

@if (_pageData == null || _students == null)
{
    <p><em>Загрузка...</em></p>
}
else
{
    <table class="table table-bordered">
        <thead>
            <tr>
                <th class="col-1 text-center align-middle">№</th>
                <th class="col-5 text-center align-middle">
                    Фамилия, имя, отчество (полностью)
                    <ReferenceButton Uri="@GetStudentsRefPageUri()" ButtonSize="ButtonSizes.Small" />
                </th>
                <th class="col-3 text-center align-middle">Пропущено учебных занятий<br />по болезни</th>
                <th class="col-3 text-center align-middle">Примечание</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var record in _pageData.StudentHealthCard)
            {
                <tr class="@GetRowClass(record.Id)">
                    <td>
                        @if (_canEdit)
                        {
                            <input type="number" min="1" onkeypress="return (event.charCode !=8 && event.charCode ==0 || (event.charCode >= 48 && event.charCode <= 57))"
                            @bind="record.Number" @bind:after="async () => await Update(record)" class="input fullwidth" />
                        }
                        else
                        {
                            <p>@record.Number</p>
                        }
                    </td>
                    <td>
                        @if (_canEdit)
                        {
                            <select @bind="record.StudentId" @bind:after="async () => await Update(record)" class="input fullwidth">
                                <option value="">(нет)</option>
                                @foreach (var student in _students)
                                {
                                    @if (record.StudentId == student.Id || !_pageData.StudentHealthCard.Any(a => a.StudentId == student.Id))
                                    {
                                        <option @key="student.Id" value="@student.Id">@student.LastName @student.FirstName @student.MiddleName</option>
                                    }
                                }
                            </select>
                        }
                        else
                        {
                            StudentResponse? student = null;
                            if (record.StudentId != null) student = _students.FirstOrDefault(s => s.Id == record.StudentId);
                            <p>@(student == null ? "" : student.GetFIO())</p>
                        }
                    </td>
                    <td>
                        @if (_canEdit)
                        {
                            <input type="number" min="0" onkeypress="return (event.charCode !=8 && event.charCode ==0 || (event.charCode >= 48 && event.charCode <= 57))"
                            @bind="record.MissedClasses" @bind:after="async () => await Update(record)" class="input fullwidth" />
                        }
                        else
                        {
                            <p>@record.MissedClasses</p>
                        }
                    </td>
                    <td>
                        @if (_canEdit)
                        {
                            <textarea rows="1" style="overflow:hidden; resize:none;" oninput="this.style.height = 'auto'; this.style.height = (this.scrollHeight) + 'px';"
                            @bind="record.Note" @bind:after="async () => await Update(record)" class="input fullwidth" />
                        }
                        else
                        {
                            <p>@record.Note</p>
                        }
                    </td>
                    @if (_canEdit)
                    {
                        <td>
                            <DeleteButton @onclick="() => OpenDeleteModal(record.Id)" />
                        </td>
                    }
                </tr>
            }
        </tbody>
    </table>
    @if (_canEdit)
    {
        <AddButton @onclick="Add">Добавить строку</AddButton>
    }
    <ConfirmDeleteModal IsVisible="_isDeleteModalVisible" OnClose="CloseDeleteModal" IdToDelete="_idToDelete" OnDeleteById="Delete" />

    <AlertBottom IsVisible="_isServerErrorAlertVisible" OnClose="CloseServerErrorAlert">@_errorMessage</AlertBottom>
}

@code {
    [Parameter]
    public int PageId { get; set; }

    [Parameter]
    public int JournalId { get; set; }

    public HealthCardPageResponse? _pageData;

    private GroupResponse? _group;

    private List<AcademicYearResponse>? _academicYears;

    private List<StudentResponse>? _students;

    private bool _canEdit => !JournalState.IsCurrentPageApproved && AppState.CanEditJournal;

    protected override async Task OnInitializedAsync()
    {
        JournalState.OnToggleIsApproved += StateHasChanged;
    }

    protected override async Task OnParametersSetAsync()
    {
        await JournalState.Initialize(JournalId, PageId);

        _pageData = await HttpClient.GetFromJsonAsync<HealthCardPageResponse>("api/journal/healthcard/" + PageId.ToString());

        _group = await HttpClient.GetFromJsonAsync<GroupResponse>("api/group/getbyjournal/" + JournalId.ToString());

        var getAcademicYearsUri = "api/academicyear/getsinceyear/";
        if (_group != null)
        {
            _academicYears = await HttpClient.GetFromJsonAsync<List<AcademicYearResponse>>(getAcademicYearsUri + _group.AdmissionYear.ToString());
            _groupId = _group.Id;
        }
        else
            _academicYears = await HttpClient.GetFromJsonAsync<List<AcademicYearResponse>>(getAcademicYearsUri);

        _students = await HttpClient.GetFromJsonAsync<List<StudentResponse>>("api/student/getbyjournal/" + JournalId.ToString());
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await Task.Delay(10);
        await JSRuntime.InvokeVoidAsync("resizeTextAreas");
    }

    private async Task Add()
    {
        var request = new CreateHealthCardRecordRequest(null, null, null, null, PageId);
        var response = await HttpClient.PostAsJsonAsync<CreateHealthCardRecordRequest>("api/journal/healthcard", request);

        if (response.IsSuccessStatusCode)
        {
            var addedRecord = await response.Content.ReadFromJsonAsync<HealthCardRecordResponse>();
            _pageData!.StudentHealthCard.Add(addedRecord!);
        }
        else
        {
            var errorMessage = (await response.Content.ReadAsStringAsync()).Split('\n').FirstOrDefault();
            ShowServerErrorAlert(errorMessage);            
        }
    }

    private async Task Update(HealthCardRecordResponse record)
    {
        _rowsWithErrors.Remove(record.Id);
        CloseServerErrorAlert();

        var request = record.ToRequest();
        var response = await HttpClient.PutAsJsonAsync<UpdateHealthCardRecordRequest>
            ("api/journal/healthcard/" + record.Id, request);

        if (!response.IsSuccessStatusCode)
        {
            _rowsWithErrors.Add(record.Id);
            var errorMessage = (await response.Content.ReadAsStringAsync()).Split('\n').FirstOrDefault();
            ShowServerErrorAlert(errorMessage);
        }
    }

    private async Task Delete(int recordId)
    {
        var response = await HttpClient.DeleteAsync("api/journal/healthcard/" + recordId);

        if (response.IsSuccessStatusCode) _pageData!.StudentHealthCard.RemoveAll(r => r.Id == recordId);
        else
        {
            var errorMessage = (await response.Content.ReadAsStringAsync()).Split('\n').FirstOrDefault();
            ShowServerErrorAlert(errorMessage);
        }
    }

    private async Task UpdateAttributes()
    {
        var request = new UpdateHealthCardPageAttributesRequest(_pageData!.Attributes.AcademicYearId);
        var response = await HttpClient.PutAsJsonAsync<UpdateHealthCardPageAttributesRequest>
            ("api/journal/healthcard/updateattributes/" + _pageData!.Attributes.Id, request);

        if (!response.IsSuccessStatusCode)
        {
            var errorMessage = (await response.Content.ReadAsStringAsync()).Split('\n').FirstOrDefault();
            ShowServerErrorAlert(errorMessage);
        }
    }
}
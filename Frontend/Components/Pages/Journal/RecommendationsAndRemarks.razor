@page "/journal/{journalId:int}/RecomendationsAndRemarks/{pageId:int}"
@rendermode InteractiveServer

@using Contracts.Journal
@using Contracts.Journal.ContactPhones
@using Contracts.Journal.PersonalizedAccountingCards
@using Contracts.Journal.RecommendationsAndRemarks
@using Contracts.Journal.StudentList
@using Contracts.Mappers.Journal
@using Contracts.Students
@using Contracts.Workers
@using Frontend.Services

@inject HttpClient HttpClient
@inject JournalState JournalState

<PageTitle>Рекомендации и замечания лиц, проверяющих работу куратора</PageTitle>

<h3 class="d-flex justify-content-center">РЕКОМЕНДАЦИИ И ЗАМЕЧАНИЯ ЛИЦ, ПРОВЕРЯЮЩИХ РАБОТУ КУРАТОРА</h3>

@if (_pageData == null || _workers == null)
{
    <p><em>Загрузка...</em></p>
}
else
{
    <table class="table table-bordered">
        <thead>
            <tr>
                <th class="text-center">Дата</th>
                <th class="text-center">
                    Кто проверил<br/>
                    (должность, фамилия)
                </th>
                <th class="text-center">Рекомендации, замечания</th>
                <th class="text-center">
                    Выполнение,<br/>
                    дата
                </th>
            </tr>
        </thead>
        <tbody>
            @foreach (var record in _pageData.RecommendationsAndRemarks)
            {
                <tr>
                    <td>
                        <input type="date" @bind="record.Date" @bind:after='async () => await Update(record)' class="input" />
                    </td>
                    <td>
                        <select @bind="record.ReviewerId" @bind:after="async () => await Update(record)" class="input fullwidth">
                            <option value="">(нет)</option>
                            @foreach (var worker in _workers)
                            {
                                <option @key="worker.Id" value="@worker.Id">
                                    @worker.Position.Name, <br/>
                                    @worker.LastName
                                </option>
                            }
                        </select>
                    </td>
                    <td>
                        <input @bind="record.Content" @bind:after='async () => await Update(record)' class="input fullwidth" />
                    </td>
                    <td>
                        <input @bind="record.Result" @bind:after='async () => await Update(record)' class="input fullwidth" />
                        <br/>
                        <input type="date" @bind="record.ExecutionDate" @bind:after='async () => await Update(record)' class="input fullwidth" />
                    </td>
                    <td>
                        <button @onclick="async () => await Delete(record)" class="btn btn-close" />
                    </td>
                </tr>
            }
        </tbody>
    </table>
    <button @onclick="Add" class="btn btn-outline-primary">Добавить строку</button>
}

@code {
    [Parameter]
    public int PageId { get; set; }

    [Parameter]
    public int JournalId { get; set; }

    private RecommendationsAndRemarksPageResponse? _pageData;

    private List<WorkerResponse>? _workers;

    protected override async Task OnInitializedAsync()
    {
        JournalState.SetJournalId(JournalId);

        _pageData = await HttpClient.GetFromJsonAsync<RecommendationsAndRemarksPageResponse>("api/journal/recommendationsandremarks/" + PageId.ToString());
        _workers = await HttpClient.GetFromJsonAsync<List<WorkerResponse>>("api/worker/");
    }

    private async Task Update(RecommendationsAndRemarksRecordResponse record)
    {
        Console.WriteLine("Update recommendation");

        var request = record.ToRequest();
        var response = await HttpClient.PutAsJsonAsync<UpdateRecommendationsAndRemarksRecordRequest>("api/journal/recommendationsandremarks/" + record.Id, request);

        if (!response.IsSuccessStatusCode)
        {
            //TODO
        }
    }

    private async Task Add()
    {
        Console.WriteLine("Add recommendation");

        var request = new CreateRecommendationsAndRemarksRecordRequest(null, null, null, null, null, PageId);
        var response = await HttpClient.PostAsJsonAsync<CreateRecommendationsAndRemarksRecordRequest>("api/journal/recommendationsandremarks", request);

        if (response.IsSuccessStatusCode)
        {
            var addedRecord = await response.Content.ReadFromJsonAsync<RecommendationsAndRemarksRecordResponse>();
            _pageData!.RecommendationsAndRemarks.Add(addedRecord!);
        }
    }

    private async Task Delete(RecommendationsAndRemarksRecordResponse record)
    {
        Console.WriteLine("Delete recommendation");

        var response = await HttpClient.DeleteAsync("api/journal/recommendationsandremarks/" + record.Id);

        if (response.IsSuccessStatusCode) _pageData!.RecommendationsAndRemarks.Remove(record);
    }
}

<style>
    .input {
        border: none;
        outline: none;
        background: transparent;
    }

    .fullwidth {
        width: 100%;
    }
</style>
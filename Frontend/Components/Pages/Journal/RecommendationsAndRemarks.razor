@page "/journal/{journalId:int}/RecomendationsAndRemarks/{pageId:int}"

@inherits TablePageBase

@attribute [Authorize]

@using Contracts.Journal
@using Contracts.Journal.ContactPhones
@using Contracts.Journal.PersonalizedAccountingCards
@using Contracts.Journal.RecommendationsAndRemarks
@using Contracts.Journal.StudentList
@using Contracts.Mappers.Journal
@using Contracts.Students
@using Contracts.Workers
@using Frontend.Components.Buttons
@using Frontend.Components.Utils
@using Frontend.Services

@inject HttpClient HttpClient
@inject JournalState JournalState
@inject IJSRuntime JSRuntime
@inject AppState AppState

<PageTitle>Рекомендации и замечания лиц, проверяющих работу куратора</PageTitle>

<h3 class="d-flex justify-content-center">РЕКОМЕНДАЦИИ И ЗАМЕЧАНИЯ ЛИЦ, ПРОВЕРЯЮЩИХ РАБОТУ КУРАТОРА</h3>

@if (_pageData == null || _workers == null || AppState.User == null)
{
    <p><em>Загрузка...</em></p>
}
else
{
    <table class="table table-bordered">
        <thead>
            <tr>
                <th class="col-1 text-center align-middle">Дата</th>
                <th class="col-3 text-center align-middle">
                    Кто проверил<br/>
                    (должность, фамилия)
                    <ReferenceButton Uri="/Workers" ButtonSize="ButtonSizes.Small" />
                </th>
                <th class="col-6 text-center align-middle">Рекомендации, замечания</th>
                <th colspan="2" class="col-2 text-center align-middle">
                    Выполнение,<br/>
                    дата
                </th>
            </tr>
        </thead>
        <tbody>
            @foreach (var record in _pageData.RecommendationsAndRemarks)
            {
                <tr class="@GetRowClass(record.Id)">
                    <td>
                        @if (CanEditRecord(record))
                        {
                            <input type="date" @bind="record.Date" @bind:after='async () => await Update(record)' class="input" />
                        }
                        else
                        {
                            <p>@record.Date.ToString()</p>
                        }
                    </td>
                    <td>
                        @if (CanEditRecord(record))
                        {
                            <select @bind="record.ReviewerId" @bind:after="async () => await Update(record)" class="input fullwidth">
                                <option value="">(нет)</option>
                                @foreach (var worker in _workers.Where(w => w.Id == AppState.User.WorkerId))
                                {
                                    <option @key="worker.Id" value="@worker.Id">
                                        @worker.Position.Name, <br />
                                        @worker.LastName
                                    </option>
                                }
                            </select>
                        }
                        else
                        {
                            var worker = _workers.FirstOrDefault(w => w.Id == record.ReviewerId);
                            if (worker != null)
                            {
                                <p>
                                    @worker.Position.Name, <br />
                                    @worker.LastName
                                </p>
                            }
                            else
                            {
                                <p></p>
                            }
                        }
                    </td>
                    <td>
                        @if (CanEditRecord(record))
                        {
                            <textarea rows="1" style="overflow:hidden; resize:none;" oninput="this.style.height = 'auto'; this.style.height = (this.scrollHeight) + 'px';"
                            @bind="record.Content" @bind:after='async () => await Update(record)' class="input fullwidth" />
                        }
                        else
                        {
                            <p>@record.Content</p>
                        }
                    </td>
                    <td>
                        @if (CanEditRecord(record))
                        {
                            <textarea rows="1" style="overflow:hidden; resize:none;" oninput="this.style.height = 'auto'; this.style.height = (this.scrollHeight) + 'px';"
                            @bind="record.Result" @bind:after='async () => await Update(record)' class="input fullwidth" />
                        }
                        else
                        {
                            <p>@record.Result</p>
                        }
                    </td>
                    <td>
                        @if (CanEditRecord(record))
                        {
                            <input type="date" @bind="record.ExecutionDate" @bind:after='async () => await Update(record)' class="input fullwidth" />
                        }
                        else
                        {
                            <p>@record.ExecutionDate.ToString()</p>
                        }
                    </td>
                    @if (CanEditRecord(record))
                    {
                        <td>
                            <DeleteButton @onclick="() => OpenDeleteModal(record.Id)" />
                        </td>
                    }
                </tr>
            }
        </tbody>
    </table>
    @if (_canEdit)
    {
        <AddButton @onclick="Add">Добавить строку</AddButton>
    }

    <ConfirmDeleteModal IsVisible="_isDeleteModalVisible" OnClose="CloseDeleteModal" IdToDelete="_idToDelete" OnDeleteById="Delete" />

    <AlertBottom IsVisible="_isServerErrorAlertVisible" OnClose="CloseServerErrorAlert">@_errorMessage</AlertBottom>
}

@code {
    [Parameter]
    public int PageId { get; set; }

    [Parameter]
    public int JournalId { get; set; }

    private RecommendationsAndRemarksPageResponse? _pageData;

    private List<WorkerResponse>? _workers;

    private bool _canEdit => !JournalState.IsCurrentPageApproved && AppState.CanApprovePages;

    protected override async Task OnInitializedAsync()
    {
        JournalState.OnToggleIsApproved += StateHasChanged;
    }

    protected override async Task OnParametersSetAsync()
    {
        await JournalState.Initialize(JournalId, PageId);

        _pageData = await HttpClient.GetFromJsonAsync<RecommendationsAndRemarksPageResponse>("api/journal/recommendationsandremarks/" + PageId.ToString());
        _workers = await HttpClient.GetFromJsonAsync<List<WorkerResponse>>("api/worker/");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await Task.Delay(10);
        await JSRuntime.InvokeVoidAsync("resizeTextAreas");
    }

    private bool CanEditRecord(RecommendationsAndRemarksRecordResponse record)
    {
        return _canEdit && (AppState.User.WorkerId != null && (record.ReviewerId == AppState.User.WorkerId || record.ReviewerId == null));
    }

    private async Task Update(RecommendationsAndRemarksRecordResponse record)
    {
        _rowsWithErrors.Remove(record.Id);
        CloseServerErrorAlert();

        var request = record.ToRequest();
        var response = await HttpClient.PutAsJsonAsync<UpdateRecommendationsAndRemarksRecordRequest>("api/journal/recommendationsandremarks/" + record.Id, request);

        if (!response.IsSuccessStatusCode)
        {
            _rowsWithErrors.Add(record.Id);
            var errorMessage = (await response.Content.ReadAsStringAsync()).Split('\n').FirstOrDefault();
            ShowServerErrorAlert(errorMessage);
        }
    }

    private async Task Add()
    {
        var request = new CreateRecommendationsAndRemarksRecordRequest(null, null, null, null, null, PageId);
        var response = await HttpClient.PostAsJsonAsync<CreateRecommendationsAndRemarksRecordRequest>("api/journal/recommendationsandremarks", request);

        if (response.IsSuccessStatusCode)
        {
            var addedRecord = await response.Content.ReadFromJsonAsync<RecommendationsAndRemarksRecordResponse>();
            _pageData!.RecommendationsAndRemarks.Add(addedRecord!);
        }
        else
        {
            var errorMessage = (await response.Content.ReadAsStringAsync()).Split('\n').FirstOrDefault();
            ShowServerErrorAlert(errorMessage);
        }
    }

    private async Task Delete(int recordId)
    {
        var response = await HttpClient.DeleteAsync("api/journal/recommendationsandremarks/" + recordId);

        if (response.IsSuccessStatusCode) _pageData!.RecommendationsAndRemarks.RemoveAll(r => r.Id == recordId);
        else
        {
            var errorMessage = (await response.Content.ReadAsStringAsync()).Split('\n').FirstOrDefault();
            ShowServerErrorAlert(errorMessage);
        }
    }
}
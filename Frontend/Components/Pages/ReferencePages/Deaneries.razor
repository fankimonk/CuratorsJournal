@page "/Deaneries"

@using Contracts.Deaneries
@using Contracts.Faculties
@using Contracts.Workers
@using Frontend.Components.Buttons
@using Frontend.Components.Utils
@using Microsoft.AspNetCore.Components.QuickGrid

@attribute [Authorize]

@inject HttpClient HttpClient

<PageTitle>Деканаты</PageTitle>

<h1>Деканаты</h1>

@if (_deaneries == null || _faculties == null || _deans == null || _deputyDeans == null)
{
    <p><em>Загрузка...</em></p>
}
else
{
    <AddButton @onclick="ShowAddModal">Добавить</AddButton>

    <QuickGrid Items="_deaneries" class="table">
        <PropertyColumn Property="@(l => _faculties.FirstOrDefault(f => f.Id == l.FacultyId)!.Name)" Sortable="true" Title="Факультет" class="align-middle" />
        <PropertyColumn Property="@(l => GetDeanFIOById(l.DeanId))" Title="Декан" class="align-middle" />
        <PropertyColumn Property="@(l => GetDeputyDeanFIOById(l.DeputyDeanId))" Title="Зам. декана" class="align-middle" />
        <TemplateColumn class="text-end">
            <EditButton @onclick="() => ShowEditModal(context)" />
            <DeleteButton @onclick="async () => await Delete(context)" />
        </TemplateColumn>
    </QuickGrid>

    <Modal IsVisible="_isAddModalVisible" OnClose="CloseModal">
        <div class="row">
            <div class="col-md-12">
                <EditForm method="post" Model="DeaneryToAdd" OnValidSubmit="Add" OnInvalidSubmit="ShowErrorAlert" FormName="add" Enhance>
                    <DataAnnotationsValidator />
                    <Alert Type="success" IsVisible="_isSuccessAlertVisible" OnClose="CloseSuccessAlert" />
                    <Alert Type="error" IsVisible="_isErrorAlertVisible" OnClose="CloseErrorAlert">
                        <ValidationSummary />
                    </Alert>
                    <div class="mb-3">
                        <label for="faculty" class="form-label">Факультет: </label>
                        <InputSelect id="faculty" @bind-Value="DeaneryToAdd.FacultyId" class="form-control">
                            <option value="">(нет)</option>
                            @foreach (var faculty in _faculties)
                            {
                                <option @key="faculty.Id" value="@faculty.Id">@faculty.Name</option>
                            }
                        </InputSelect>
                    </div>
                    <div class="mb-3">
                        <label for="dean" class="form-label">Декан: </label>
                        <InputSelect id="dean" @bind-Value="DeaneryToAdd.DeanId" class="form-control">
                            <option value="">(нет)</option>
                            @foreach (var dean in _deans)
                            {
                                <option @key="dean.Id" value="@dean.Id">@GetDeanFIOById(dean.Id)</option>
                            }
                        </InputSelect>
                    </div>
                    <div class="mb-3">
                        <label for="depdean" class="form-label">Зам. декана: </label>
                        <InputSelect id="depdean" @bind-Value="DeaneryToAdd.DeputyDeanId" class="form-control">
                            <option value="">(нет)</option>
                            @foreach (var depdean in _deputyDeans)
                            {
                                <option @key="depdean.Id" value="@depdean.Id">@GetDeputyDeanFIOById(depdean.Id)</option>
                            }
                        </InputSelect>
                    </div>
                    <AddButton type="submit">Добавить</AddButton>
                </EditForm>
            </div>
        </div>
    </Modal>

    <Modal IsVisible="_isEditModalVisible" OnClose="CloseModal">
        <div class="row">
            <div class="col-md-12">
                <EditForm method="put" Model="DeaneryToEdit" OnValidSubmit="Update" OnInvalidSubmit="ShowErrorAlert" FormName="edit" Enhance>
                    <DataAnnotationsValidator />
                    <Alert Type="success" IsVisible="_isSuccessAlertVisible" OnClose="CloseSuccessAlert" />
                    <Alert Type="error" IsVisible="_isErrorAlertVisible" OnClose="CloseErrorAlert">
                        <ValidationSummary />
                    </Alert>
                    <div class="mb-3">
                        <label for="faculty" class="form-label">Факультет: </label>
                        <InputSelect id="faculty" @bind-Value="DeaneryToEdit.FacultyId" class="form-control">
                            @foreach (var faculty in _faculties)
                            {
                                <option @key="faculty.Id" value="@faculty.Id">@faculty.Name</option>
                            }
                        </InputSelect>
                    </div>
                    <div class="mb-3">
                        <label for="dean" class="form-label">Декан: </label>
                        <InputSelect id="dean" @bind-Value="DeaneryToEdit.DeanId" class="form-control">
                            @foreach (var dean in _deans)
                            {
                                <option @key="dean.Id" value="@dean.Id">@GetDeanFIOById(dean.Id)</option>
                            }
                        </InputSelect>
                    </div>
                    <div class="mb-3">
                        <label for="depdean" class="form-label">Зам. декана: </label>
                        <InputSelect id="depdean" @bind-Value="DeaneryToEdit.DeputyDeanId" class="form-control">
                            @foreach (var depdean in _deputyDeans)
                            {
                                <option @key="depdean.Id" value="@depdean.Id">@GetDeputyDeanFIOById(depdean.Id)</option>
                            }
                        </InputSelect>
                    </div>
                    <EditButton type="submit">Редактировать</EditButton>
                </EditForm>
            </div>
        </div>
    </Modal>

    <AlertBottom IsVisible="_isServerErrorAlertVisible" OnClose="CloseServerErrorAlert">@_errorMessage</AlertBottom>
}

@code {
    [SupplyParameterFromForm]
    public CreateDeaneryRequest DeaneryToAdd { get; set; } = new(null, null, null);

    [SupplyParameterFromForm]
    public UpdateDeaneryRequest DeaneryToEdit { get; set; } = new(-1, -1, -1);
    private int _deaneryToEditId = -1;

    private IQueryable<DeaneryResponse>? _deaneries;

    private List<FacultyResponse>? _faculties;
    private List<WorkerResponse>? _deans;
    private List<WorkerResponse>? _deputyDeans;

    private bool _isModalVisible = false;
    private bool _isAddModal = true;

    private bool _isAddModalVisible { get => _isModalVisible && _isAddModal; }
    private bool _isEditModalVisible { get => _isModalVisible && !_isAddModal; }

    private bool _isSuccessAlertVisible = false;
    private bool _isErrorAlertVisible = false;

    private bool _isServerErrorAlertVisible = false;
    private string? _errorMessage = "";

    protected override async Task OnInitializedAsync()
    {
        var deaneries = await HttpClient.GetFromJsonAsync<List<DeaneryResponse>>("api/deanery");
        if (deaneries != null)
            _deaneries = deaneries.AsQueryable();

        _faculties = await HttpClient.GetFromJsonAsync<List<FacultyResponse>>("api/faculty");
        _deans = await HttpClient.GetFromJsonAsync<List<WorkerResponse>>($"api/worker/?PositionId={1}");
        _deputyDeans = await HttpClient.GetFromJsonAsync<List<WorkerResponse>>($"api/worker/?PositionId={2}");
    }

    private string GetDeanFIOById(int id)
    {
        if (_deans == null) return "";

        var dean = _deans.FirstOrDefault(d => d.Id == id);
        if (dean == null) return "";

        return dean.LastName + " " + dean.FirstName + " " + dean.MiddleName;
    }

    private string GetDeputyDeanFIOById(int id)
    {
        if (_deputyDeans == null) return "";

        var depDean = _deputyDeans.FirstOrDefault(d => d.Id == id);
        if (depDean == null) return "";

        return depDean.LastName + " " + depDean.FirstName + " " + depDean.MiddleName;
    }

    public async Task Add()
    {
        var response = await HttpClient.PostAsJsonAsync<CreateDeaneryRequest>("api/deanery", DeaneryToAdd);

        if (response.IsSuccessStatusCode)
        {
            var added = await response.Content.ReadFromJsonAsync<DeaneryResponse>();
            _deaneries = _deaneries!.Append(added!);

            ShowSuccessAlert();
        }
        else
        {
            var errorMessage = await response.Content.ReadAsStringAsync();
            _errorMessage = errorMessage.Split('\n').FirstOrDefault();
            ShowServerErrorAlert();
        }
    }

    public async Task Update()
    {
        var response = await HttpClient.PutAsJsonAsync<UpdateDeaneryRequest>("api/deanery/" + _deaneryToEditId, DeaneryToEdit);

        if (response.IsSuccessStatusCode)
        {
            var updated = await response.Content.ReadFromJsonAsync<DeaneryResponse>();
            var literatureToUpdate = _deaneries!.FirstOrDefault(l => l.Id == updated!.Id);

            literatureToUpdate!.FacultyId = updated!.FacultyId;
            literatureToUpdate!.DeanId = updated!.DeanId;
            literatureToUpdate!.DeputyDeanId = updated!.DeputyDeanId;

            ShowSuccessAlert();
        }
        else
        {
            var errorMessage = await response.Content.ReadAsStringAsync();
            _errorMessage = errorMessage.Split('\n').FirstOrDefault();
            ShowServerErrorAlert();
        }
    }

    public async Task Delete(DeaneryResponse deanery)
    {
        var response = await HttpClient.DeleteAsync("api/deanery/" + deanery.Id);

        if (response.IsSuccessStatusCode)
        {
            _deaneries = _deaneries!.Where(l => l.Id != deanery.Id);
        }
        else
        {
            var errorMessage = await response.Content.ReadAsStringAsync();
            _errorMessage = errorMessage.Split('\n').FirstOrDefault();
            ShowServerErrorAlert();
        }
    }

    private void ShowAddModal()
    {
        _isAddModal = true;
        _isModalVisible = true;
    }

    private void ShowEditModal(DeaneryResponse deanery)
    {
        _deaneryToEditId = deanery.Id;
        DeaneryToEdit = new UpdateDeaneryRequest(deanery.FacultyId, deanery.DeanId, deanery.DeputyDeanId);
        _isAddModal = false;
        _isModalVisible = true;
    }

    private void CloseModal()
    {
        DeaneryToAdd = new(null, null, null);
        _deaneryToEditId = -1;
        DeaneryToEdit = new(-1, -1, -1);
        _isModalVisible = false;
        CloseSuccessAlert();
        CloseErrorAlert();
        CloseServerErrorAlert();
    }

    private void CloseAlerts()
    {
        CloseSuccessAlert();
        Console.WriteLine(_isSuccessAlertVisible);
        CloseErrorAlert();
        Console.WriteLine(_isErrorAlertVisible);
    }

    private void CloseSuccessAlert() => _isSuccessAlertVisible = false;

    private void ShowSuccessAlert()
    {
        CloseErrorAlert();
        _isSuccessAlertVisible = true;
    }

    private void CloseErrorAlert() => _isErrorAlertVisible = false;

    private void ShowErrorAlert()
    {
        CloseSuccessAlert();
        _isErrorAlertVisible = true;
    }

    private void CloseServerErrorAlert()
    {
        _isServerErrorAlertVisible = false;
        _errorMessage = "";
    }

    private void ShowServerErrorAlert() => _isServerErrorAlertVisible = true;
}
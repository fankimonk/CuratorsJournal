@page "/literature"
@rendermode InteractiveServer

@using Contracts.Literature
@using Frontend.Components.Buttons
@using Frontend.Components.Utils
@using Microsoft.AspNetCore.Components.QuickGrid

@inject HttpClient HttpClient

<PageTitle>Список литературы</PageTitle>

<h1>Список литературы</h1>

@if (_literature == null)
{
    <p><em>Загрузка...</em></p>
}
else
{
    <AddButton @onclick="ShowAddModal">Добавить</AddButton>

    <QuickGrid Items="_literature" class="table">
        <PropertyColumn Property="@(l => l.Author)" Sortable="true" Title="Автор" class="align-middle" />
        <PropertyColumn Property="@(l => l.Name)" Sortable="true" Title="Название" class="align-middle" />
        <PropertyColumn Property="@(l => l.BibliographicData)" Title="Библиографические данные" class="align-middle" />
        <TemplateColumn class="text-end">
            <EditButton @onclick="() => ShowEditModal(context)" />
            <DeleteButton @onclick="async () => await Delete(context)" />
        </TemplateColumn>
    </QuickGrid>

    <ModalForm IsVisible="_isAddModalVisible" OnClose="CloseModal">
        <div class="row">
            <div class="col-md-12">
                <EditForm method="post" Model="LiteratureToAdd" OnValidSubmit="Add" OnInvalidSubmit="ShowErrorAlert" FormName="add" Enhance>
                    <DataAnnotationsValidator />
                    <Alert Type="success" IsVisible="_isSuccessAlertVisible" OnClose="CloseSuccessAlert" />
                    <Alert Type="error" IsVisible="_isErrorAlertVisible" OnClose="CloseErrorAlert">
                        <ValidationSummary />
                    </Alert>
                    <div class="mb-3">
                        <label for="author" class="form-label">Автор: </label>
                        <InputText id="author" @bind-Value="LiteratureToAdd.Author" class="form-control" />
                    </div>
                    <div class="mb-3">
                        <label for="name" class="form-label">Название: </label>
                        <InputText id="name" @bind-Value="LiteratureToAdd.Name" class="form-control" />
                    </div>
                    <div class="mb-3">
                        <label for="bibliographicData" class="form-label">Библиографические данные: </label>
                        <InputText id="bibliographicData" @bind-Value="LiteratureToAdd.BibliographicData" class="form-control" />
                    </div>
                    <AddButton type="submit">Добавить</AddButton>
                </EditForm>
            </div>
        </div>
    </ModalForm>

    <ModalForm IsVisible="_isEditModalVisible" OnClose="CloseModal">
        <div class="row">
            <div class="col-md-12">
                <EditForm method="put" Model="LiteratureToEdit" OnValidSubmit="Update" OnInvalidSubmit="ShowErrorAlert" FormName="edit" Enhance>
                    <DataAnnotationsValidator />
                    <Alert Type="success" IsVisible="_isSuccessAlertVisible" OnClose="CloseSuccessAlert" />
                    <Alert Type="error" IsVisible="_isErrorAlertVisible" OnClose="CloseErrorAlert">
                        <ValidationSummary />
                    </Alert>
                    <div class="mb-3">
                        <label for="author" class="form-label">Автор: </label>
                        <InputText id="author" @bind-Value="LiteratureToEdit.Author" class="form-control" />
                    </div>
                    <div class="mb-3">
                        <label for="name" class="form-label">Название: </label>
                        <InputText id="name" @bind-Value="LiteratureToEdit.Name" class="form-control" />
                    </div>
                    <div class="mb-3">
                        <label for="bibliographicData" class="form-label">Библиографические данные: </label>
                        <InputText id="bibliographicData" @bind-Value="LiteratureToEdit.BibliographicData" class="form-control" />
                    </div>
                    <EditButton type="submit">Редактировать</EditButton>
                </EditForm>
            </div>
        </div>
    </ModalForm>

    <AlertBottom IsVisible="_isServerErrorAlertVisible" OnClose="CloseServerErrorAlert">@_errorMessage</AlertBottom>
}

@code {
    [SupplyParameterFromForm]
    public CreateLiteratureRequest LiteratureToAdd { get; set; } = new("", "", "");

    [SupplyParameterFromForm]
    public UpdateLiteratureRequest LiteratureToEdit { get; set; } = new("", "", "");
    private int _literatureToEditId = -1;

    private IQueryable<LiteratureResponse>? _literature;

    private bool _isModalVisible = false;
    private bool _isAddModal = true;

    private bool _isAddModalVisible { get => _isModalVisible && _isAddModal; }
    private bool _isEditModalVisible { get => _isModalVisible && !_isAddModal; }

    private bool _isSuccessAlertVisible = false;
    private bool _isErrorAlertVisible = false;

    private bool _isServerErrorAlertVisible = false;
    private string? _errorMessage = "";

    protected override async Task OnInitializedAsync()
    {
        var literature = await HttpClient.GetFromJsonAsync<List<LiteratureResponse>>("api/literature/");
        if (literature != null)
            _literature = literature.AsQueryable();
    }

    public async Task Add()
    {
        var response = await HttpClient.PostAsJsonAsync<CreateLiteratureRequest>("api/literature", LiteratureToAdd);

        if (response.IsSuccessStatusCode)
        {
            var added = await response.Content.ReadFromJsonAsync<LiteratureResponse>();
            _literature = _literature!.Append(added!);

            ShowSuccessAlert();
        }
        else
        {
            var errorMessage = await response.Content.ReadAsStringAsync();
            _errorMessage = errorMessage.Split('\n').FirstOrDefault();
            ShowServerErrorAlert();
        }
    }

    public async Task Update()
    {
        var request = new UpdateLiteratureRequest(LiteratureToEdit.Author, LiteratureToEdit.Name, LiteratureToEdit.BibliographicData);
        var response = await HttpClient.PutAsJsonAsync<UpdateLiteratureRequest>("api/literature/" + _literatureToEditId, request);

        if (response.IsSuccessStatusCode)
        {
            var updated = await response.Content.ReadFromJsonAsync<LiteratureResponse>();
            var literatureToUpdate = _literature!.FirstOrDefault(l => l.Id == updated!.Id);

            literatureToUpdate!.Author = updated!.Author;
            literatureToUpdate.Name = updated.Name;
            literatureToUpdate.BibliographicData = updated.BibliographicData;

            ShowSuccessAlert();
        }
        else
        {
            var errorMessage = await response.Content.ReadAsStringAsync();
            _errorMessage = errorMessage.Split('\n').FirstOrDefault();
            ShowServerErrorAlert();
        }
    }

    public async Task Delete(LiteratureResponse literature)
    {
        var response = await HttpClient.DeleteAsync("api/literature/" + literature.Id);

        if (response.IsSuccessStatusCode)
        {
            _literature = _literature!.Where(l => l.Id != literature.Id);
        }
        else
        {
            var errorMessage = await response.Content.ReadAsStringAsync();
            _errorMessage = errorMessage.Split('\n').FirstOrDefault();
            ShowServerErrorAlert();
        }
    }

    private void ShowAddModal()
    {
        _isAddModal = true;
        _isModalVisible = true;
    }

    private void ShowEditModal(LiteratureResponse literature)
    {
        _literatureToEditId = literature.Id;
        LiteratureToEdit = new UpdateLiteratureRequest(literature.Author, literature.Name, literature.BibliographicData);
        _isAddModal = false;
        _isModalVisible = true;
    }

    private void CloseModal()
    {
        LiteratureToAdd = new("", "", "");
        _literatureToEditId = -1;
        LiteratureToEdit = new("", "", "");
        _isModalVisible = false;
        CloseSuccessAlert();
        CloseErrorAlert();
        CloseServerErrorAlert();
    }

    private void CloseSuccessAlert() => _isSuccessAlertVisible = false;

    private void ShowSuccessAlert()
    {
        CloseErrorAlert();
        _isSuccessAlertVisible = true;
    }

    private void CloseErrorAlert() => _isErrorAlertVisible = false;

    private void ShowErrorAlert()
    {
        CloseSuccessAlert();
        _isErrorAlertVisible = true;
    }

    private void CloseServerErrorAlert() 
    {
        _isServerErrorAlertVisible = false;
        _errorMessage = "";
    }

    private void ShowServerErrorAlert() => _isServerErrorAlertVisible = true;
}
@page "/faculties"
 
@using Contracts.Faculties
@using Frontend.Components.Buttons
@using Frontend.Components.Utils
@using Microsoft.AspNetCore.Components.QuickGrid

@inject HttpClient HttpClient

<PageTitle>Факультеты</PageTitle>

<h1>Факультеты</h1>

@if (_faculties == null)
{
    <p><em>Загрузка...</em></p>
}
else
{
    <AddButton @onclick="ShowAddModal">Добавить</AddButton>

    <QuickGrid Items="_faculties" class="table">
        <PropertyColumn Property="@(l => l.Name)" Sortable="true" Title="Название" class="align-middle" />
        <PropertyColumn Property="@(l => l.AbbreviatedName)" Title="Аббревиатура" class="align-middle" />
        <TemplateColumn class="text-end">
            <EditButton @onclick="() => ShowEditModal(context)" />
            <DeleteButton @onclick="async () => await Delete(context)" />
        </TemplateColumn>
    </QuickGrid>

    <Modal IsVisible="_isAddModalVisible" OnClose="CloseModal">
        <div class="row">
            <div class="col-md-12">
                <EditForm method="post" Model="FacultyToAdd" OnValidSubmit="Add" OnInvalidSubmit="ShowErrorAlert" FormName="add" Enhance>
                    <DataAnnotationsValidator />
                    <Alert Type="success" IsVisible="_isSuccessAlertVisible" OnClose="CloseSuccessAlert" />
                    <Alert Type="error" IsVisible="_isErrorAlertVisible" OnClose="CloseErrorAlert">
                        <ValidationSummary />
                    </Alert>
                    <div class="mb-3">
                        <label for="name" class="form-label">Название: </label>
                        <InputText id="name" @bind-Value="FacultyToAdd.Name" class="form-control" />
                    </div>
                    <div class="mb-3">
                        <label for="abbreviatedName" class="form-label">Аббревиатура: </label>
                        <InputText id="abbreviatedName" @bind-Value="FacultyToAdd.AbbreviatedName" class="form-control" />
                    </div>
                    <AddButton type="submit">Добавить</AddButton>
                </EditForm>
            </div>
        </div>
    </Modal>

    <Modal IsVisible="_isEditModalVisible" OnClose="CloseModal">
        <div class="row">
            <div class="col-md-12">
                <EditForm method="put" Model="FacultyToEdit" OnValidSubmit="Update" OnInvalidSubmit="ShowErrorAlert" FormName="edit" Enhance>
                    <DataAnnotationsValidator />
                    <Alert Type="success" IsVisible="_isSuccessAlertVisible" OnClose="CloseSuccessAlert" />
                    <Alert Type="error" IsVisible="_isErrorAlertVisible" OnClose="CloseErrorAlert">
                        <ValidationSummary />
                    </Alert>
                    <div class="mb-3">
                        <label for="name" class="form-label">Название: </label>
                        <InputText id="name" @bind-Value="FacultyToEdit.Name" class="form-control" />
                    </div>
                    <div class="mb-3">
                        <label for="abbreviatedName" class="form-label">Аббревиатура: </label>
                        <InputText id="abbreviatedName" @bind-Value="FacultyToEdit.AbbreviatedName" class="form-control" />
                    </div>
                    <EditButton type="submit">Редактировать</EditButton>
                </EditForm>
            </div>
        </div>
    </Modal>

    <AlertBottom IsVisible="_isServerErrorAlertVisible" OnClose="CloseServerErrorAlert">@_errorMessage</AlertBottom>
}

@code {
    [SupplyParameterFromForm]
    public CreateFacultyRequest FacultyToAdd { get; set; } = new("", "");

    [SupplyParameterFromForm]
    public UpdateFacultyRequest FacultyToEdit { get; set; } = new("", "");
    private int _facultyToEditId = -1;

    private IQueryable<FacultyResponse>? _faculties;

    private bool _isModalVisible = false;
    private bool _isAddModal = true;

    private bool _isAddModalVisible { get => _isModalVisible && _isAddModal; }
    private bool _isEditModalVisible { get => _isModalVisible && !_isAddModal; }

    private bool _isSuccessAlertVisible = false;
    private bool _isErrorAlertVisible = false;

    private bool _isServerErrorAlertVisible = false;
    private string? _errorMessage = "";

    protected override async Task OnInitializedAsync()
    {
        var faculties = await HttpClient.GetFromJsonAsync<List<FacultyResponse>>("api/faculty");
        if (faculties != null)
            _faculties = faculties.AsQueryable();
    }

    public async Task Add()
    {
        var response = await HttpClient.PostAsJsonAsync<CreateFacultyRequest>("api/faculty", FacultyToAdd);

        if (response.IsSuccessStatusCode)
        {
            var added = await response.Content.ReadFromJsonAsync<FacultyResponse>();
            _faculties = _faculties!.Append(added!);

            ShowSuccessAlert();
        }
        else
        {
            var errorMessage = await response.Content.ReadAsStringAsync();
            _errorMessage = errorMessage.Split('\n').FirstOrDefault();
            ShowServerErrorAlert();
        }
    }

    public async Task Update()
    {
        var request = new UpdateFacultyRequest(FacultyToEdit.Name, FacultyToEdit.AbbreviatedName);
        var response = await HttpClient.PutAsJsonAsync<UpdateFacultyRequest>("api/faculty/" + _facultyToEditId, request);

        if (response.IsSuccessStatusCode)
        {
            var updated = await response.Content.ReadFromJsonAsync<FacultyResponse>();
            var literatureToUpdate = _faculties!.FirstOrDefault(l => l.Id == updated!.Id);

            literatureToUpdate!.Name = updated!.Name;
            literatureToUpdate.AbbreviatedName = updated.AbbreviatedName;

            ShowSuccessAlert();
        }
        else
        {
            var errorMessage = await response.Content.ReadAsStringAsync();
            _errorMessage = errorMessage.Split('\n').FirstOrDefault();
            ShowServerErrorAlert();
        }
    }

    public async Task Delete(FacultyResponse faculty)
    {
        var response = await HttpClient.DeleteAsync("api/faculty/" + faculty.Id);

        if (response.IsSuccessStatusCode)
        {
            _faculties = _faculties!.Where(l => l.Id != faculty.Id);
        }
        else
        {
            var errorMessage = await response.Content.ReadAsStringAsync();
            _errorMessage = errorMessage.Split('\n').FirstOrDefault();
            ShowServerErrorAlert();
        }
    }

    private void ShowAddModal()
    {
        _isAddModal = true;
        _isModalVisible = true;
    }

    private void ShowEditModal(FacultyResponse faculty)
    {
        _facultyToEditId = faculty.Id;
        FacultyToEdit = new UpdateFacultyRequest(faculty.Name, faculty.AbbreviatedName);
        _isAddModal = false;
        _isModalVisible = true;
    }

    private void CloseModal()
    {
        FacultyToAdd = new("", "");
        _facultyToEditId = -1;
        FacultyToEdit = new("", "");
        _isModalVisible = false;
        CloseSuccessAlert();
        CloseErrorAlert();
        CloseServerErrorAlert();
    }

    private void CloseAlerts()
    {
        CloseSuccessAlert();
        Console.WriteLine(_isSuccessAlertVisible);
        CloseErrorAlert();
        Console.WriteLine(_isErrorAlertVisible);
    }

    private void CloseSuccessAlert() => _isSuccessAlertVisible = false;

    private void ShowSuccessAlert()
    {
        CloseErrorAlert();
        _isSuccessAlertVisible = true;
    }

    private void CloseErrorAlert() => _isErrorAlertVisible = false;

    private void ShowErrorAlert()
    {
        CloseSuccessAlert();
        _isErrorAlertVisible = true;
    }

    private void CloseServerErrorAlert()
    {
        _isServerErrorAlertVisible = false;
        _errorMessage = "";
    }

    private void ShowServerErrorAlert() => _isServerErrorAlertVisible = true;
}
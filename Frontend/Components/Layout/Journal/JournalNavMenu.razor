@using Contracts.Journal
@using Frontend.Components.Buttons
@using Frontend.Services

@inject JournalState JournalState

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">Frontend</a>
    </div>
</div>

<input type="checkbox" title="Navigation menu" class="navbar-toggler" />

<div class="nav-scrollable" onclick="document.querySelector('.navbar-toggler').click()">
    <nav class="nav flex-column">
        <div class="nav-item px-3">
            @if (JournalState.JournalContents != null)
            {
                @foreach (var pt in JournalState.JournalContents.PageTypes)
                {
                    @if (pt.MaxPages != 1)
                    {
                        <NavLink class="nav-link" style="cursor:pointer;" @onclick="() => ToggleExpandSubNav(pt.Id)">
                            @pt.Name
                        </NavLink>
                    }
                    @foreach (var page in pt.Pages!)
                    {
                        if (!JournalState.PageTypesNavLinksExpanded.ContainsKey(pt.Id) || JournalState.PageTypesNavLinksExpanded[pt.Id])
                        {
                            var pageUrl = $"/journal/{JournalState.JournalContents.JournalId}/{pt.Name}/{page.Id}";
                            <NavLink class="@GetNavLinkClass(pt.Id)" href="@pageUrl" Match="NavLinkMatch.All">
                                @if (PagesRusNames.ContainsKey(pt.Id))
                                {
                                    <div class="text-nowrap">
                                        @PagesRusNames[pt.Id].ToString()
                                    </div>
                                }
                                else
                                {
                                    <div class="text-nowrap">
                                        @pt.Name
                                    </div>
                                }
                            </NavLink>
                        }
                    }
                }
            }
        </div>
    </nav>
</div>

@code {
    private Dictionary<int, string> PagesRusNames = new Dictionary<int, string>()
    {
        { 1, "Титульная страница" },
        { 2, "Контактные телефоны" },
        { 3, "Праздники" },
        { 4, "Социально-педагогическая характеристика" },
        { 5, "График учебного процесса" },
        { 6, "Динамика основных показателей группы за период обучения" },
        { 7, "Актив учебной группы" },
        { 8, "Список студентов" }
    };

    private void ToggleExpandSubNav(int pageTypeId)
    {
        if (JournalState.PageTypesNavLinksExpanded.ContainsKey(pageTypeId))
        {
            JournalState.PageTypesNavLinksExpanded[pageTypeId] = !JournalState.PageTypesNavLinksExpanded[pageTypeId];
        }
    }

    private string GetNavLinkClass(int pageTypeId) => JournalState.PageTypesNavLinksExpanded.ContainsKey(pageTypeId) ? "nav-link ms-4" : "nav-link";

    protected override async Task OnInitializedAsync()
    {
        JournalState.OnInitialize += HandleOnInitialize;
    }

    private void HandleOnInitialize()
    {
        StateHasChanged();
    }

    public void Dispose()
    {
        JournalState.OnInitialize -= HandleOnInitialize;
    }
}
@using Contracts.Journal
@using Contracts.Journal.Pages
@using Frontend.Components.Buttons
@using Frontend.Services

@inject JournalState JournalState
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">Главная</a>
    </div>
</div>

<input type="checkbox" title="Navigation menu" class="navbar-toggler" />

<div class="nav-scrollable" onclick="document.querySelector('.navbar-toggler').click()">
    <nav class="nav flex-column">
        <div class="nav-item">
            @if (JournalState.JournalContents != null)
            {
                @foreach (var pt in JournalState.JournalContents.PageTypes)
                {
                    @if (pt.MaxPages != 1)
                    {
                        <NavLink class="nav-link d-flex justify-content-between" style="position:relative; cursor:pointer;" @onclick="() => ToggleExpandSubNav(pt.Id)">
                            <span class="text-nowrap">
                                @if (JournalState.PageTypesNavLinksExpanded[pt.Id])
                                {
                                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-caret-up-fill" viewBox="0 0 16 16">
                                        <path d="m7.247 4.86-4.796 5.481c-.566.647-.106 1.659.753 1.659h9.592a1 1 0 0 0 .753-1.659l-4.796-5.48a1 1 0 0 0-1.506 0z"></path>
                                    </svg>
                                }
                                else
                                {
                                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-caret-down-fill" viewBox="0 0 16 16">
                                        <path d="M7.247 11.14 2.451 5.658C1.885 5.013 2.345 4 3.204 4h9.592a1 1 0 0 1 .753 1.659l-4.796 5.48a1 1 0 0 1-1.506 0z"></path>
                                    </svg>
                                }
                                @pt.Name
                            </span>
                            <AddButton StopPropagation="true" IsNotOutline="true" ButtonSize="ButtonSizes.Small" @onclick='async () => await AddPage(pt.Id)' />
                        </NavLink>
                    }
                    @foreach (var page in pt.Pages!)
                    {
                        if (!JournalState.PageTypesNavLinksExpanded.ContainsKey(pt.Id) || JournalState.PageTypesNavLinksExpanded[pt.Id])
                        {
                            var pageUrl = $"/journal/{JournalState.JournalContents.JournalId}/{pt.Name}/{page.Id}";
                            <NavLink class="@GetNavLinkClass(pt.Id)" href="@pageUrl" Match="NavLinkMatch.All">
                                @if (PagesRusNames.ContainsKey(pt.Id))
                                {
                                    <div class="text-nowrap">
                                        @PagesRusNames[pt.Id].ToString()
                                    </div>
                                }
                                else
                                {
                                    <div class="text-nowrap">
                                        @pt.Name
                                    </div>
                                }
                            </NavLink>
                        }
                    }
                }
            }
        </div>
    </nav>
</div>

@code {
    private Dictionary<int, string> PagesRusNames = new Dictionary<int, string>()
    {
        { 1, "Титульная страница" },
        { 2, "Контактные телефоны" },
        { 3, "Праздники" },
        { 4, "Социально-педагогическая характеристика" },
        { 5, "График учебного процесса" },
        { 6, "Динамика основных показателей группы за период обучения" },
        { 7, "Актив учебной группы" },
        { 8, "Список студентов" }
    };

    private async Task AddPage(int pageTypeId)
    {
        var response = await HttpClient.PostAsJsonAsync<AddPageRequest>("api/page", new AddPageRequest(JournalState.JournalId, pageTypeId));
        if (response.IsSuccessStatusCode)
        {
            var page = await response.Content.ReadFromJsonAsync<PageResponse>();
            JournalState.AddPage(page!);
            NavigationManager.NavigateTo($"/journal/{JournalState.JournalContents!.JournalId}/{page!.PageType!.Name}/{page.Id}");
        }
    }

    private void ToggleExpandSubNav(int pageTypeId)
    {
        if (JournalState.PageTypesNavLinksExpanded.ContainsKey(pageTypeId))
        {
            JournalState.PageTypesNavLinksExpanded[pageTypeId] = !JournalState.PageTypesNavLinksExpanded[pageTypeId];
        }
    }

    private string GetNavLinkClass(int pageTypeId) => JournalState.PageTypesNavLinksExpanded.ContainsKey(pageTypeId) ? "nav-link ms-4" : "nav-link";

    protected override async Task OnInitializedAsync()
    {
        JournalState.OnInitialize += HandleOnInitialize;
    }

    private void HandleOnInitialize()
    {
        StateHasChanged();
    }

    public void Dispose()
    {
        JournalState.OnInitialize -= HandleOnInitialize;
    }
}

<style >
    .nav-link button {
        position: sticky;
        right: 10px; /* Позиционируем кнопку с правого края */
        z-index: 10; /* Чтобы кнопка была сверху */
    }
</style>
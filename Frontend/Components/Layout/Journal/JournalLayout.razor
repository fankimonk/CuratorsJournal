@using Contracts.Journal
@using Contracts.Journal.Pages
@using Frontend.Services

@inherits LayoutComponentBase

@inject JournalState JournalState
@inject AppState AppState
@inject NavigationManager NavigationManager

<div class="page">
    <div class="sidebar">
        <JournalNavMenu />
    </div>

    <main>
        <div class="top-row px-4">
            @if (JournalState.CurrentPageNode != null)
            {
                @* <div class="container">
                    <div class="row justify-content-lg-end">
                        <div class="col-1 d-flex align-items-center justify-content-center">
                            
                        </div>
                        <div class="col-1 d-flex align-items-center justify-content-center">
                            
                        </div>
                    </div>
                </div> *@
                <button @onclick="GoToThePrevPage" class="btn btn-primary" disabled="@IsPrevButtonDisabled()">Назад</button>
                <button @onclick="GoToTheNextPage" class="btn btn-primary ms-4" disabled="@IsNextButtonDisabled()">Вперед</button>
                
            }
        </div>

        <article class="content px-4">
            @Body
        </article>
    </main>
</div>

<div id="blazor-error-ui" data-nosnippet>
    An unhandled error has occurred.
    <a href="." class="reload">Reload</a>
    <span class="dismiss">🗙</span>
</div>

@code {
    protected override async Task OnInitializedAsync()
    {
        await AppState.FetchUser();
        JournalState.OnInitialize += HandleOnInitialize;
    }

    private void HandleOnInitialize() => StateHasChanged();

    private bool IsPrevButtonDisabled() => JournalState.CurrentPageNode == null || JournalState.CurrentPageNode.Previous == null;
    private bool IsNextButtonDisabled() => JournalState.CurrentPageNode == null || JournalState.CurrentPageNode.Next == null;

    private void GoToThePrevPage() => NavigationManager.NavigateTo(GetPreviousPageUrl());
    private void GoToTheNextPage() => NavigationManager.NavigateTo(GetNextPageUrl());

    private string GetNextPageUrl()
    {
        if (JournalState.CurrentPageNode == null) return ".";

        var nextPageNode = JournalState.CurrentPageNode.Next;
        if (nextPageNode == null) return ".";

        return $"/journal/{JournalState.JournalId}/{nextPageNode!.Value.PageType!.Name}/{nextPageNode.Value.Id}";
    }

    private string GetPreviousPageUrl()
    {
        if (JournalState.CurrentPageNode == null) return ".";

        var prevPageNode = JournalState.CurrentPageNode.Previous;
        if (prevPageNode == null) return ".";

        return $"/journal/{JournalState.JournalId}/{prevPageNode!.Value.PageType!.Name}/{prevPageNode.Value.Id}";
    }

    public void Dispose()
    {
        JournalState.OnInitialize -= HandleOnInitialize;
    }
}